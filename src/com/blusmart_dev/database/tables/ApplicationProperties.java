/*
 * This file is generated by jOOQ.
 */
package com.blusmart_dev.database.tables;


import com.blusmart_dev.database.Blusmartdevdb;
import com.blusmart_dev.database.Keys;
import com.blusmart_dev.database.tables.records.ApplicationPropertiesRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ApplicationProperties extends TableImpl<ApplicationPropertiesRecord> {

    private static final long serialVersionUID = 784989822;

    /**
     * The reference instance of <code>blusmartDevDb.application_properties</code>
     */
    public static final ApplicationProperties APPLICATION_PROPERTIES = new ApplicationProperties();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ApplicationPropertiesRecord> getRecordType() {
        return ApplicationPropertiesRecord.class;
    }

    /**
     * The column <code>blusmartDevDb.application_properties.id</code>.
     */
    public final TableField<ApplicationPropertiesRecord, UInteger> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>blusmartDevDb.application_properties.property_name</code>.
     */
    public final TableField<ApplicationPropertiesRecord, String> PROPERTY_NAME = createField(DSL.name("property_name"), org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>blusmartDevDb.application_properties.property_description</code>.
     */
    public final TableField<ApplicationPropertiesRecord, String> PROPERTY_DESCRIPTION = createField(DSL.name("property_description"), org.jooq.impl.SQLDataType.VARCHAR(200).defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>blusmartDevDb.application_properties.property_value</code>.
     */
    public final TableField<ApplicationPropertiesRecord, String> PROPERTY_VALUE = createField(DSL.name("property_value"), org.jooq.impl.SQLDataType.CLOB.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * The column <code>blusmartDevDb.application_properties.property_type</code>.
     */
    public final TableField<ApplicationPropertiesRecord, String> PROPERTY_TYPE = createField(DSL.name("property_type"), org.jooq.impl.SQLDataType.VARCHAR(200).defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>blusmartDevDb.application_properties.is_active</code>.
     */
    public final TableField<ApplicationPropertiesRecord, Byte> IS_ACTIVE = createField(DSL.name("is_active"), org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>blusmartDevDb.application_properties.created_timestamp</code>.
     */
    public final TableField<ApplicationPropertiesRecord, Long> CREATED_TIMESTAMP = createField(DSL.name("created_timestamp"), org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>blusmartDevDb.application_properties.last_updated_timestamp</code>.
     */
    public final TableField<ApplicationPropertiesRecord, Long> LAST_UPDATED_TIMESTAMP = createField(DSL.name("last_updated_timestamp"), org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>blusmartDevDb.application_properties.created_by</code>.
     */
    public final TableField<ApplicationPropertiesRecord, UInteger> CREATED_BY = createField(DSL.name("created_by"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.INTEGERUNSIGNED)), this, "");

    /**
     * The column <code>blusmartDevDb.application_properties.last_updated_by</code>.
     */
    public final TableField<ApplicationPropertiesRecord, UInteger> LAST_UPDATED_BY = createField(DSL.name("last_updated_by"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.INTEGERUNSIGNED)), this, "");

    /**
     * The column <code>blusmartDevDb.application_properties.service_name</code>.
     */
    public final TableField<ApplicationPropertiesRecord, String> SERVICE_NAME = createField(DSL.name("service_name"), org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>blusmartDevDb.application_properties.platform</code>.
     */
    public final TableField<ApplicationPropertiesRecord, String> PLATFORM = createField(DSL.name("platform"), org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>blusmartDevDb.application_properties</code> table reference
     */
    public ApplicationProperties() {
        this(DSL.name("application_properties"), null);
    }

    /**
     * Create an aliased <code>blusmartDevDb.application_properties</code> table reference
     */
    public ApplicationProperties(String alias) {
        this(DSL.name(alias), APPLICATION_PROPERTIES);
    }

    /**
     * Create an aliased <code>blusmartDevDb.application_properties</code> table reference
     */
    public ApplicationProperties(Name alias) {
        this(alias, APPLICATION_PROPERTIES);
    }

    private ApplicationProperties(Name alias, Table<ApplicationPropertiesRecord> aliased) {
        this(alias, aliased, null);
    }

    private ApplicationProperties(Name alias, Table<ApplicationPropertiesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> ApplicationProperties(Table<O> child, ForeignKey<O, ApplicationPropertiesRecord> key) {
        super(child, key, APPLICATION_PROPERTIES);
    }

    @Override
    public Schema getSchema() {
        return Blusmartdevdb.BLUSMARTDEVDB;
    }

    @Override
    public Identity<ApplicationPropertiesRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_APPLICATION_PROPERTIES;
    }

    @Override
    public UniqueKey<ApplicationPropertiesRecord> getPrimaryKey() {
        return Keys.KEY_APPLICATION_PROPERTIES_PRIMARY;
    }

    @Override
    public List<UniqueKey<ApplicationPropertiesRecord>> getKeys() {
        return Arrays.<UniqueKey<ApplicationPropertiesRecord>>asList(Keys.KEY_APPLICATION_PROPERTIES_PRIMARY);
    }

    @Override
    public ApplicationProperties as(String alias) {
        return new ApplicationProperties(DSL.name(alias), this);
    }

    @Override
    public ApplicationProperties as(Name alias) {
        return new ApplicationProperties(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ApplicationProperties rename(String name) {
        return new ApplicationProperties(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ApplicationProperties rename(Name name) {
        return new ApplicationProperties(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<UInteger, String, String, String, String, Byte, Long, Long, UInteger, UInteger, String, String> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
