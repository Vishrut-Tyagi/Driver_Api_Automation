/*
 * This file is generated by jOOQ.
 */
package com.blusmart_dev.database.tables;


import com.blusmart_dev.database.Blusmartdevdb;
import com.blusmart_dev.database.Keys;
import com.blusmart_dev.database.tables.records.ManufacturesRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Manufactures extends TableImpl<ManufacturesRecord> {

    private static final long serialVersionUID = -1274868641;

    /**
     * The reference instance of <code>blusmartDevDb.manufactures</code>
     */
    public static final Manufactures MANUFACTURES = new Manufactures();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ManufacturesRecord> getRecordType() {
        return ManufacturesRecord.class;
    }

    /**
     * The column <code>blusmartDevDb.manufactures.id</code>.
     */
    public final TableField<ManufacturesRecord, UInteger> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>blusmartDevDb.manufactures.manufacture_name</code>.
     */
    public final TableField<ManufacturesRecord, String> MANUFACTURE_NAME = createField(DSL.name("manufacture_name"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>blusmartDevDb.manufactures.is_active</code>.
     */
    public final TableField<ManufacturesRecord, Byte> IS_ACTIVE = createField(DSL.name("is_active"), org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>blusmartDevDb.manufactures.created_by</code>.
     */
    public final TableField<ManufacturesRecord, Integer> CREATED_BY = createField(DSL.name("created_by"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>blusmartDevDb.manufactures.last_updated_by</code>.
     */
    public final TableField<ManufacturesRecord, Integer> LAST_UPDATED_BY = createField(DSL.name("last_updated_by"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>blusmartDevDb.manufactures.created_at</code>.
     */
    public final TableField<ManufacturesRecord, Long> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>blusmartDevDb.manufactures.last_updated_at</code>.
     */
    public final TableField<ManufacturesRecord, Long> LAST_UPDATED_AT = createField(DSL.name("last_updated_at"), org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * Create a <code>blusmartDevDb.manufactures</code> table reference
     */
    public Manufactures() {
        this(DSL.name("manufactures"), null);
    }

    /**
     * Create an aliased <code>blusmartDevDb.manufactures</code> table reference
     */
    public Manufactures(String alias) {
        this(DSL.name(alias), MANUFACTURES);
    }

    /**
     * Create an aliased <code>blusmartDevDb.manufactures</code> table reference
     */
    public Manufactures(Name alias) {
        this(alias, MANUFACTURES);
    }

    private Manufactures(Name alias, Table<ManufacturesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Manufactures(Name alias, Table<ManufacturesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Manufactures(Table<O> child, ForeignKey<O, ManufacturesRecord> key) {
        super(child, key, MANUFACTURES);
    }

    @Override
    public Schema getSchema() {
        return Blusmartdevdb.BLUSMARTDEVDB;
    }

    @Override
    public Identity<ManufacturesRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_MANUFACTURES;
    }

    @Override
    public UniqueKey<ManufacturesRecord> getPrimaryKey() {
        return Keys.KEY_MANUFACTURES_PRIMARY;
    }

    @Override
    public List<UniqueKey<ManufacturesRecord>> getKeys() {
        return Arrays.<UniqueKey<ManufacturesRecord>>asList(Keys.KEY_MANUFACTURES_PRIMARY);
    }

    @Override
    public Manufactures as(String alias) {
        return new Manufactures(DSL.name(alias), this);
    }

    @Override
    public Manufactures as(Name alias) {
        return new Manufactures(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Manufactures rename(String name) {
        return new Manufactures(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Manufactures rename(Name name) {
        return new Manufactures(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<UInteger, String, Byte, Integer, Integer, Long, Long> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
