/*
 * This file is generated by jOOQ.
 */
package com.blusmart_dev.database.tables;


import com.blusmart_dev.database.Blusmartdevdb;
import com.blusmart_dev.database.Keys;
import com.blusmart_dev.database.tables.records.OverwritingFarePriceRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row17;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OverwritingFarePrice extends TableImpl<OverwritingFarePriceRecord> {

    private static final long serialVersionUID = -2077434450;

    /**
     * The reference instance of <code>blusmartDevDb.overwriting_fare_price</code>
     */
    public static final OverwritingFarePrice OVERWRITING_FARE_PRICE = new OverwritingFarePrice();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OverwritingFarePriceRecord> getRecordType() {
        return OverwritingFarePriceRecord.class;
    }

    /**
     * The column <code>blusmartDevDb.overwriting_fare_price.id</code>.
     */
    public final TableField<OverwritingFarePriceRecord, UInteger> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>blusmartDevDb.overwriting_fare_price.from_address</code>.
     */
    public final TableField<OverwritingFarePriceRecord, String> FROM_ADDRESS = createField(DSL.name("from_address"), org.jooq.impl.SQLDataType.VARCHAR(1000).nullable(false), this, "");

    /**
     * The column <code>blusmartDevDb.overwriting_fare_price.from_lat</code>.
     */
    public final TableField<OverwritingFarePriceRecord, BigDecimal> FROM_LAT = createField(DSL.name("from_lat"), org.jooq.impl.SQLDataType.DECIMAL(16, 8).nullable(false), this, "");

    /**
     * The column <code>blusmartDevDb.overwriting_fare_price.from_long</code>.
     */
    public final TableField<OverwritingFarePriceRecord, BigDecimal> FROM_LONG = createField(DSL.name("from_long"), org.jooq.impl.SQLDataType.DECIMAL(16, 8).nullable(false), this, "");

    /**
     * The column <code>blusmartDevDb.overwriting_fare_price.from_radius</code>.
     */
    public final TableField<OverwritingFarePriceRecord, Integer> FROM_RADIUS = createField(DSL.name("from_radius"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>blusmartDevDb.overwriting_fare_price.to_address</code>.
     */
    public final TableField<OverwritingFarePriceRecord, String> TO_ADDRESS = createField(DSL.name("to_address"), org.jooq.impl.SQLDataType.VARCHAR(1000).nullable(false), this, "");

    /**
     * The column <code>blusmartDevDb.overwriting_fare_price.to_lat</code>.
     */
    public final TableField<OverwritingFarePriceRecord, BigDecimal> TO_LAT = createField(DSL.name("to_lat"), org.jooq.impl.SQLDataType.DECIMAL(16, 8).nullable(false), this, "");

    /**
     * The column <code>blusmartDevDb.overwriting_fare_price.to_long</code>.
     */
    public final TableField<OverwritingFarePriceRecord, BigDecimal> TO_LONG = createField(DSL.name("to_long"), org.jooq.impl.SQLDataType.DECIMAL(16, 8).nullable(false), this, "");

    /**
     * The column <code>blusmartDevDb.overwriting_fare_price.to_radius</code>.
     */
    public final TableField<OverwritingFarePriceRecord, Integer> TO_RADIUS = createField(DSL.name("to_radius"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>blusmartDevDb.overwriting_fare_price.system_fare</code>.
     */
    public final TableField<OverwritingFarePriceRecord, UInteger> SYSTEM_FARE = createField(DSL.name("system_fare"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>blusmartDevDb.overwriting_fare_price.actual_fare</code>.
     */
    public final TableField<OverwritingFarePriceRecord, UInteger> ACTUAL_FARE = createField(DSL.name("actual_fare"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>blusmartDevDb.overwriting_fare_price.status</code>.
     */
    public final TableField<OverwritingFarePriceRecord, Byte> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>blusmartDevDb.overwriting_fare_price.is_active</code>.
     */
    public final TableField<OverwritingFarePriceRecord, Byte> IS_ACTIVE = createField(DSL.name("is_active"), org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>blusmartDevDb.overwriting_fare_price.created_timestamp</code>.
     */
    public final TableField<OverwritingFarePriceRecord, Long> CREATED_TIMESTAMP = createField(DSL.name("created_timestamp"), org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>blusmartDevDb.overwriting_fare_price.last_updated_timestamp</code>.
     */
    public final TableField<OverwritingFarePriceRecord, Long> LAST_UPDATED_TIMESTAMP = createField(DSL.name("last_updated_timestamp"), org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>blusmartDevDb.overwriting_fare_price.created_by</code>.
     */
    public final TableField<OverwritingFarePriceRecord, UInteger> CREATED_BY = createField(DSL.name("created_by"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.INTEGERUNSIGNED)), this, "");

    /**
     * The column <code>blusmartDevDb.overwriting_fare_price.last_updated_by</code>.
     */
    public final TableField<OverwritingFarePriceRecord, UInteger> LAST_UPDATED_BY = createField(DSL.name("last_updated_by"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.INTEGERUNSIGNED)), this, "");

    /**
     * Create a <code>blusmartDevDb.overwriting_fare_price</code> table reference
     */
    public OverwritingFarePrice() {
        this(DSL.name("overwriting_fare_price"), null);
    }

    /**
     * Create an aliased <code>blusmartDevDb.overwriting_fare_price</code> table reference
     */
    public OverwritingFarePrice(String alias) {
        this(DSL.name(alias), OVERWRITING_FARE_PRICE);
    }

    /**
     * Create an aliased <code>blusmartDevDb.overwriting_fare_price</code> table reference
     */
    public OverwritingFarePrice(Name alias) {
        this(alias, OVERWRITING_FARE_PRICE);
    }

    private OverwritingFarePrice(Name alias, Table<OverwritingFarePriceRecord> aliased) {
        this(alias, aliased, null);
    }

    private OverwritingFarePrice(Name alias, Table<OverwritingFarePriceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> OverwritingFarePrice(Table<O> child, ForeignKey<O, OverwritingFarePriceRecord> key) {
        super(child, key, OVERWRITING_FARE_PRICE);
    }

    @Override
    public Schema getSchema() {
        return Blusmartdevdb.BLUSMARTDEVDB;
    }

    @Override
    public Identity<OverwritingFarePriceRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_OVERWRITING_FARE_PRICE;
    }

    @Override
    public UniqueKey<OverwritingFarePriceRecord> getPrimaryKey() {
        return Keys.KEY_OVERWRITING_FARE_PRICE_PRIMARY;
    }

    @Override
    public List<UniqueKey<OverwritingFarePriceRecord>> getKeys() {
        return Arrays.<UniqueKey<OverwritingFarePriceRecord>>asList(Keys.KEY_OVERWRITING_FARE_PRICE_PRIMARY);
    }

    @Override
    public OverwritingFarePrice as(String alias) {
        return new OverwritingFarePrice(DSL.name(alias), this);
    }

    @Override
    public OverwritingFarePrice as(Name alias) {
        return new OverwritingFarePrice(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OverwritingFarePrice rename(String name) {
        return new OverwritingFarePrice(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OverwritingFarePrice rename(Name name) {
        return new OverwritingFarePrice(name, null);
    }

    // -------------------------------------------------------------------------
    // Row17 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row17<UInteger, String, BigDecimal, BigDecimal, Integer, String, BigDecimal, BigDecimal, Integer, UInteger, UInteger, Byte, Byte, Long, Long, UInteger, UInteger> fieldsRow() {
        return (Row17) super.fieldsRow();
    }
}
