/*
 * This file is generated by jOOQ.
 */
package com.blusmart_dev.database.tables;


import com.blusmart_dev.database.Blusmartdevdb;
import com.blusmart_dev.database.Keys;
import com.blusmart_dev.database.tables.records.PartnerBookingsPaymentRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PartnerBookingsPayment extends TableImpl<PartnerBookingsPaymentRecord> {

    private static final long serialVersionUID = 1798223187;

    /**
     * The reference instance of <code>blusmartDevDb.partner_bookings_payment</code>
     */
    public static final PartnerBookingsPayment PARTNER_BOOKINGS_PAYMENT = new PartnerBookingsPayment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PartnerBookingsPaymentRecord> getRecordType() {
        return PartnerBookingsPaymentRecord.class;
    }

    /**
     * The column <code>blusmartDevDb.partner_bookings_payment.id</code>.
     */
    public final TableField<PartnerBookingsPaymentRecord, UInteger> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>blusmartDevDb.partner_bookings_payment.search_id</code>.
     */
    public final TableField<PartnerBookingsPaymentRecord, String> SEARCH_ID = createField(DSL.name("search_id"), org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>blusmartDevDb.partner_bookings_payment.total_amount</code>.
     */
    public final TableField<PartnerBookingsPaymentRecord, BigDecimal> TOTAL_AMOUNT = createField(DSL.name("total_amount"), org.jooq.impl.SQLDataType.DECIMAL(11, 2).defaultValue(org.jooq.impl.DSL.inline("0.00", org.jooq.impl.SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>blusmartDevDb.partner_bookings_payment.mode</code>.
     */
    public final TableField<PartnerBookingsPaymentRecord, String> MODE = createField(DSL.name("mode"), org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>blusmartDevDb.partner_bookings_payment.paid_amount</code>.
     */
    public final TableField<PartnerBookingsPaymentRecord, BigDecimal> PAID_AMOUNT = createField(DSL.name("paid_amount"), org.jooq.impl.SQLDataType.DECIMAL(11, 2).defaultValue(org.jooq.impl.DSL.inline("0.00", org.jooq.impl.SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>blusmartDevDb.partner_bookings_payment.unpaid_amount</code>.
     */
    public final TableField<PartnerBookingsPaymentRecord, BigDecimal> UNPAID_AMOUNT = createField(DSL.name("unpaid_amount"), org.jooq.impl.SQLDataType.DECIMAL(11, 2).defaultValue(org.jooq.impl.DSL.inline("0.00", org.jooq.impl.SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>blusmartDevDb.partner_bookings_payment.payment_status</code>.
     */
    public final TableField<PartnerBookingsPaymentRecord, String> PAYMENT_STATUS = createField(DSL.name("payment_status"), org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>blusmartDevDb.partner_bookings_payment.is_active</code>.
     */
    public final TableField<PartnerBookingsPaymentRecord, Byte> IS_ACTIVE = createField(DSL.name("is_active"), org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>blusmartDevDb.partner_bookings_payment.notes</code>.
     */
    public final TableField<PartnerBookingsPaymentRecord, String> NOTES = createField(DSL.name("notes"), org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>blusmartDevDb.partner_bookings_payment.created_at</code>.
     */
    public final TableField<PartnerBookingsPaymentRecord, Long> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>blusmartDevDb.partner_bookings_payment.updated_at</code>.
     */
    public final TableField<PartnerBookingsPaymentRecord, Long> UPDATED_AT = createField(DSL.name("updated_at"), org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>blusmartDevDb.partner_bookings_payment.cash_amount</code>.
     */
    public final TableField<PartnerBookingsPaymentRecord, BigDecimal> CASH_AMOUNT = createField(DSL.name("cash_amount"), org.jooq.impl.SQLDataType.DECIMAL(11, 2).defaultValue(org.jooq.impl.DSL.inline("0.00", org.jooq.impl.SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>blusmartDevDb.partner_bookings_payment.ride_request_id</code>.
     */
    public final TableField<PartnerBookingsPaymentRecord, UInteger> RIDE_REQUEST_ID = createField(DSL.name("ride_request_id"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.INTEGERUNSIGNED)), this, "");

    /**
     * Create a <code>blusmartDevDb.partner_bookings_payment</code> table reference
     */
    public PartnerBookingsPayment() {
        this(DSL.name("partner_bookings_payment"), null);
    }

    /**
     * Create an aliased <code>blusmartDevDb.partner_bookings_payment</code> table reference
     */
    public PartnerBookingsPayment(String alias) {
        this(DSL.name(alias), PARTNER_BOOKINGS_PAYMENT);
    }

    /**
     * Create an aliased <code>blusmartDevDb.partner_bookings_payment</code> table reference
     */
    public PartnerBookingsPayment(Name alias) {
        this(alias, PARTNER_BOOKINGS_PAYMENT);
    }

    private PartnerBookingsPayment(Name alias, Table<PartnerBookingsPaymentRecord> aliased) {
        this(alias, aliased, null);
    }

    private PartnerBookingsPayment(Name alias, Table<PartnerBookingsPaymentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> PartnerBookingsPayment(Table<O> child, ForeignKey<O, PartnerBookingsPaymentRecord> key) {
        super(child, key, PARTNER_BOOKINGS_PAYMENT);
    }

    @Override
    public Schema getSchema() {
        return Blusmartdevdb.BLUSMARTDEVDB;
    }

    @Override
    public Identity<PartnerBookingsPaymentRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_PARTNER_BOOKINGS_PAYMENT;
    }

    @Override
    public UniqueKey<PartnerBookingsPaymentRecord> getPrimaryKey() {
        return Keys.KEY_PARTNER_BOOKINGS_PAYMENT_PRIMARY;
    }

    @Override
    public List<UniqueKey<PartnerBookingsPaymentRecord>> getKeys() {
        return Arrays.<UniqueKey<PartnerBookingsPaymentRecord>>asList(Keys.KEY_PARTNER_BOOKINGS_PAYMENT_PRIMARY);
    }

    @Override
    public PartnerBookingsPayment as(String alias) {
        return new PartnerBookingsPayment(DSL.name(alias), this);
    }

    @Override
    public PartnerBookingsPayment as(Name alias) {
        return new PartnerBookingsPayment(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PartnerBookingsPayment rename(String name) {
        return new PartnerBookingsPayment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PartnerBookingsPayment rename(Name name) {
        return new PartnerBookingsPayment(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<UInteger, String, BigDecimal, String, BigDecimal, BigDecimal, String, Byte, String, Long, Long, BigDecimal, UInteger> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
