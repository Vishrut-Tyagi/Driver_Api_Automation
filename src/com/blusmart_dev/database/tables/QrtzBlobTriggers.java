/*
 * This file is generated by jOOQ.
 */
package com.blusmart_dev.database.tables;


import com.blusmart_dev.database.Blusmartdevdb;
import com.blusmart_dev.database.Keys;
import com.blusmart_dev.database.tables.records.QrtzBlobTriggersRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QrtzBlobTriggers extends TableImpl<QrtzBlobTriggersRecord> {

    private static final long serialVersionUID = 647241343;

    /**
     * The reference instance of <code>blusmartDevDb.QRTZ_BLOB_TRIGGERS</code>
     */
    public static final QrtzBlobTriggers QRTZ_BLOB_TRIGGERS = new QrtzBlobTriggers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QrtzBlobTriggersRecord> getRecordType() {
        return QrtzBlobTriggersRecord.class;
    }

    /**
     * The column <code>blusmartDevDb.QRTZ_BLOB_TRIGGERS.SCHED_NAME</code>.
     */
    public final TableField<QrtzBlobTriggersRecord, String> SCHED_NAME = createField(DSL.name("SCHED_NAME"), org.jooq.impl.SQLDataType.VARCHAR(120).nullable(false), this, "");

    /**
     * The column <code>blusmartDevDb.QRTZ_BLOB_TRIGGERS.TRIGGER_NAME</code>.
     */
    public final TableField<QrtzBlobTriggersRecord, String> TRIGGER_NAME = createField(DSL.name("TRIGGER_NAME"), org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>blusmartDevDb.QRTZ_BLOB_TRIGGERS.TRIGGER_GROUP</code>.
     */
    public final TableField<QrtzBlobTriggersRecord, String> TRIGGER_GROUP = createField(DSL.name("TRIGGER_GROUP"), org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>blusmartDevDb.QRTZ_BLOB_TRIGGERS.BLOB_DATA</code>.
     */
    public final TableField<QrtzBlobTriggersRecord, byte[]> BLOB_DATA = createField(DSL.name("BLOB_DATA"), org.jooq.impl.SQLDataType.BLOB.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.BLOB)), this, "");

    /**
     * Create a <code>blusmartDevDb.QRTZ_BLOB_TRIGGERS</code> table reference
     */
    public QrtzBlobTriggers() {
        this(DSL.name("QRTZ_BLOB_TRIGGERS"), null);
    }

    /**
     * Create an aliased <code>blusmartDevDb.QRTZ_BLOB_TRIGGERS</code> table reference
     */
    public QrtzBlobTriggers(String alias) {
        this(DSL.name(alias), QRTZ_BLOB_TRIGGERS);
    }

    /**
     * Create an aliased <code>blusmartDevDb.QRTZ_BLOB_TRIGGERS</code> table reference
     */
    public QrtzBlobTriggers(Name alias) {
        this(alias, QRTZ_BLOB_TRIGGERS);
    }

    private QrtzBlobTriggers(Name alias, Table<QrtzBlobTriggersRecord> aliased) {
        this(alias, aliased, null);
    }

    private QrtzBlobTriggers(Name alias, Table<QrtzBlobTriggersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> QrtzBlobTriggers(Table<O> child, ForeignKey<O, QrtzBlobTriggersRecord> key) {
        super(child, key, QRTZ_BLOB_TRIGGERS);
    }

    @Override
    public Schema getSchema() {
        return Blusmartdevdb.BLUSMARTDEVDB;
    }

    @Override
    public UniqueKey<QrtzBlobTriggersRecord> getPrimaryKey() {
        return Keys.KEY_QRTZ_BLOB_TRIGGERS_PRIMARY;
    }

    @Override
    public List<UniqueKey<QrtzBlobTriggersRecord>> getKeys() {
        return Arrays.<UniqueKey<QrtzBlobTriggersRecord>>asList(Keys.KEY_QRTZ_BLOB_TRIGGERS_PRIMARY);
    }

    @Override
    public List<ForeignKey<QrtzBlobTriggersRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<QrtzBlobTriggersRecord, ?>>asList(Keys.QRTZ_BLOB_TRIGGERS_IBFK_1);
    }

    public QrtzTriggers qrtzTriggers() {
        return new QrtzTriggers(this, Keys.QRTZ_BLOB_TRIGGERS_IBFK_1);
    }

    @Override
    public QrtzBlobTriggers as(String alias) {
        return new QrtzBlobTriggers(DSL.name(alias), this);
    }

    @Override
    public QrtzBlobTriggers as(Name alias) {
        return new QrtzBlobTriggers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public QrtzBlobTriggers rename(String name) {
        return new QrtzBlobTriggers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public QrtzBlobTriggers rename(Name name) {
        return new QrtzBlobTriggers(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, byte[]> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
