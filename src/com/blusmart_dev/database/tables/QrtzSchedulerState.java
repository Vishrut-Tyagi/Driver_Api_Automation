/*
 * This file is generated by jOOQ.
 */
package com.blusmart_dev.database.tables;


import com.blusmart_dev.database.Blusmartdevdb;
import com.blusmart_dev.database.Keys;
import com.blusmart_dev.database.tables.records.QrtzSchedulerStateRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QrtzSchedulerState extends TableImpl<QrtzSchedulerStateRecord> {

    private static final long serialVersionUID = -2084994751;

    /**
     * The reference instance of <code>blusmartDevDb.QRTZ_SCHEDULER_STATE</code>
     */
    public static final QrtzSchedulerState QRTZ_SCHEDULER_STATE = new QrtzSchedulerState();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QrtzSchedulerStateRecord> getRecordType() {
        return QrtzSchedulerStateRecord.class;
    }

    /**
     * The column <code>blusmartDevDb.QRTZ_SCHEDULER_STATE.SCHED_NAME</code>.
     */
    public final TableField<QrtzSchedulerStateRecord, String> SCHED_NAME = createField(DSL.name("SCHED_NAME"), org.jooq.impl.SQLDataType.VARCHAR(120).nullable(false), this, "");

    /**
     * The column <code>blusmartDevDb.QRTZ_SCHEDULER_STATE.INSTANCE_NAME</code>.
     */
    public final TableField<QrtzSchedulerStateRecord, String> INSTANCE_NAME = createField(DSL.name("INSTANCE_NAME"), org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>blusmartDevDb.QRTZ_SCHEDULER_STATE.LAST_CHECKIN_TIME</code>.
     */
    public final TableField<QrtzSchedulerStateRecord, Long> LAST_CHECKIN_TIME = createField(DSL.name("LAST_CHECKIN_TIME"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>blusmartDevDb.QRTZ_SCHEDULER_STATE.CHECKIN_INTERVAL</code>.
     */
    public final TableField<QrtzSchedulerStateRecord, Long> CHECKIN_INTERVAL = createField(DSL.name("CHECKIN_INTERVAL"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>blusmartDevDb.QRTZ_SCHEDULER_STATE</code> table reference
     */
    public QrtzSchedulerState() {
        this(DSL.name("QRTZ_SCHEDULER_STATE"), null);
    }

    /**
     * Create an aliased <code>blusmartDevDb.QRTZ_SCHEDULER_STATE</code> table reference
     */
    public QrtzSchedulerState(String alias) {
        this(DSL.name(alias), QRTZ_SCHEDULER_STATE);
    }

    /**
     * Create an aliased <code>blusmartDevDb.QRTZ_SCHEDULER_STATE</code> table reference
     */
    public QrtzSchedulerState(Name alias) {
        this(alias, QRTZ_SCHEDULER_STATE);
    }

    private QrtzSchedulerState(Name alias, Table<QrtzSchedulerStateRecord> aliased) {
        this(alias, aliased, null);
    }

    private QrtzSchedulerState(Name alias, Table<QrtzSchedulerStateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> QrtzSchedulerState(Table<O> child, ForeignKey<O, QrtzSchedulerStateRecord> key) {
        super(child, key, QRTZ_SCHEDULER_STATE);
    }

    @Override
    public Schema getSchema() {
        return Blusmartdevdb.BLUSMARTDEVDB;
    }

    @Override
    public UniqueKey<QrtzSchedulerStateRecord> getPrimaryKey() {
        return Keys.KEY_QRTZ_SCHEDULER_STATE_PRIMARY;
    }

    @Override
    public List<UniqueKey<QrtzSchedulerStateRecord>> getKeys() {
        return Arrays.<UniqueKey<QrtzSchedulerStateRecord>>asList(Keys.KEY_QRTZ_SCHEDULER_STATE_PRIMARY);
    }

    @Override
    public QrtzSchedulerState as(String alias) {
        return new QrtzSchedulerState(DSL.name(alias), this);
    }

    @Override
    public QrtzSchedulerState as(Name alias) {
        return new QrtzSchedulerState(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public QrtzSchedulerState rename(String name) {
        return new QrtzSchedulerState(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public QrtzSchedulerState rename(Name name) {
        return new QrtzSchedulerState(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, Long, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
