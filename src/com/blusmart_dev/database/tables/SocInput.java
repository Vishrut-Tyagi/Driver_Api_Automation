/*
 * This file is generated by jOOQ.
 */
package com.blusmart_dev.database.tables;


import com.blusmart_dev.database.Blusmartdevdb;
import com.blusmart_dev.database.Keys;
import com.blusmart_dev.database.tables.records.SocInputRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SocInput extends TableImpl<SocInputRecord> {

    private static final long serialVersionUID = -68863109;

    /**
     * The reference instance of <code>blusmartDevDb.soc_input</code>
     */
    public static final SocInput SOC_INPUT = new SocInput();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SocInputRecord> getRecordType() {
        return SocInputRecord.class;
    }

    /**
     * The column <code>blusmartDevDb.soc_input.id</code>.
     */
    public final TableField<SocInputRecord, UInteger> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>blusmartDevDb.soc_input.vehicle_number</code>.
     */
    public final TableField<SocInputRecord, String> VEHICLE_NUMBER = createField(DSL.name("vehicle_number"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>blusmartDevDb.soc_input.soc_value</code>.
     */
    public final TableField<SocInputRecord, Double> SOC_VALUE = createField(DSL.name("soc_value"), org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>blusmartDevDb.soc_input.is_active</code>.
     */
    public final TableField<SocInputRecord, Byte> IS_ACTIVE = createField(DSL.name("is_active"), org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>blusmartDevDb.soc_input.created_timestamp</code>.
     */
    public final TableField<SocInputRecord, Long> CREATED_TIMESTAMP = createField(DSL.name("created_timestamp"), org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>blusmartDevDb.soc_input.last_updated_timestamp</code>.
     */
    public final TableField<SocInputRecord, Long> LAST_UPDATED_TIMESTAMP = createField(DSL.name("last_updated_timestamp"), org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>blusmartDevDb.soc_input.created_by</code>.
     */
    public final TableField<SocInputRecord, UInteger> CREATED_BY = createField(DSL.name("created_by"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.INTEGERUNSIGNED)), this, "");

    /**
     * The column <code>blusmartDevDb.soc_input.last_updated_by</code>.
     */
    public final TableField<SocInputRecord, UInteger> LAST_UPDATED_BY = createField(DSL.name("last_updated_by"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.INTEGERUNSIGNED)), this, "");

    /**
     * Create a <code>blusmartDevDb.soc_input</code> table reference
     */
    public SocInput() {
        this(DSL.name("soc_input"), null);
    }

    /**
     * Create an aliased <code>blusmartDevDb.soc_input</code> table reference
     */
    public SocInput(String alias) {
        this(DSL.name(alias), SOC_INPUT);
    }

    /**
     * Create an aliased <code>blusmartDevDb.soc_input</code> table reference
     */
    public SocInput(Name alias) {
        this(alias, SOC_INPUT);
    }

    private SocInput(Name alias, Table<SocInputRecord> aliased) {
        this(alias, aliased, null);
    }

    private SocInput(Name alias, Table<SocInputRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> SocInput(Table<O> child, ForeignKey<O, SocInputRecord> key) {
        super(child, key, SOC_INPUT);
    }

    @Override
    public Schema getSchema() {
        return Blusmartdevdb.BLUSMARTDEVDB;
    }

    @Override
    public Identity<SocInputRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_SOC_INPUT;
    }

    @Override
    public UniqueKey<SocInputRecord> getPrimaryKey() {
        return Keys.KEY_SOC_INPUT_PRIMARY;
    }

    @Override
    public List<UniqueKey<SocInputRecord>> getKeys() {
        return Arrays.<UniqueKey<SocInputRecord>>asList(Keys.KEY_SOC_INPUT_PRIMARY);
    }

    @Override
    public SocInput as(String alias) {
        return new SocInput(DSL.name(alias), this);
    }

    @Override
    public SocInput as(Name alias) {
        return new SocInput(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SocInput rename(String name) {
        return new SocInput(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SocInput rename(Name name) {
        return new SocInput(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<UInteger, String, Double, Byte, Long, Long, UInteger, UInteger> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
