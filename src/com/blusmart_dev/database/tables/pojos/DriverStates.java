/*
 * This file is generated by jOOQ.
 */
package com.blusmart_dev.database.tables.pojos;


import java.io.Serializable;
import java.math.BigDecimal;

import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DriverStates implements Serializable {

    private static final long serialVersionUID = 1370183974;

    private UInteger   id;
    private UInteger   driverId;
    private String     driverState;
    private String     vehicleNumber;
    private Byte       isActive;
    private Long       createdTimestamp;
    private Long       lastUpdatedTimestamp;
    private UInteger   createdBy;
    private UInteger   lastUpdatedBy;
    private UInteger   rideId;
    private BigDecimal latitude;
    private BigDecimal longitude;
    private Byte       isPaused;
    private Long       nextEligibleTimestamp;
    private String     currentDestination;
    private String     destinationStatus;
    private Byte       isSocRequired;
    private Integer    pausedBy;
    private String     pauseReason;
    private Long       shiftStartTimestamp;
    private Long       shiftEndTimestamp;
    private String     otherFlags;

    public DriverStates() {}

    public DriverStates(DriverStates value) {
        this.id = value.id;
        this.driverId = value.driverId;
        this.driverState = value.driverState;
        this.vehicleNumber = value.vehicleNumber;
        this.isActive = value.isActive;
        this.createdTimestamp = value.createdTimestamp;
        this.lastUpdatedTimestamp = value.lastUpdatedTimestamp;
        this.createdBy = value.createdBy;
        this.lastUpdatedBy = value.lastUpdatedBy;
        this.rideId = value.rideId;
        this.latitude = value.latitude;
        this.longitude = value.longitude;
        this.isPaused = value.isPaused;
        this.nextEligibleTimestamp = value.nextEligibleTimestamp;
        this.currentDestination = value.currentDestination;
        this.destinationStatus = value.destinationStatus;
        this.isSocRequired = value.isSocRequired;
        this.pausedBy = value.pausedBy;
        this.pauseReason = value.pauseReason;
        this.shiftStartTimestamp = value.shiftStartTimestamp;
        this.shiftEndTimestamp = value.shiftEndTimestamp;
        this.otherFlags = value.otherFlags;
    }

    public DriverStates(
        UInteger   id,
        UInteger   driverId,
        String     driverState,
        String     vehicleNumber,
        Byte       isActive,
        Long       createdTimestamp,
        Long       lastUpdatedTimestamp,
        UInteger   createdBy,
        UInteger   lastUpdatedBy,
        UInteger   rideId,
        BigDecimal latitude,
        BigDecimal longitude,
        Byte       isPaused,
        Long       nextEligibleTimestamp,
        String     currentDestination,
        String     destinationStatus,
        Byte       isSocRequired,
        Integer    pausedBy,
        String     pauseReason,
        Long       shiftStartTimestamp,
        Long       shiftEndTimestamp,
        String     otherFlags
    ) {
        this.id = id;
        this.driverId = driverId;
        this.driverState = driverState;
        this.vehicleNumber = vehicleNumber;
        this.isActive = isActive;
        this.createdTimestamp = createdTimestamp;
        this.lastUpdatedTimestamp = lastUpdatedTimestamp;
        this.createdBy = createdBy;
        this.lastUpdatedBy = lastUpdatedBy;
        this.rideId = rideId;
        this.latitude = latitude;
        this.longitude = longitude;
        this.isPaused = isPaused;
        this.nextEligibleTimestamp = nextEligibleTimestamp;
        this.currentDestination = currentDestination;
        this.destinationStatus = destinationStatus;
        this.isSocRequired = isSocRequired;
        this.pausedBy = pausedBy;
        this.pauseReason = pauseReason;
        this.shiftStartTimestamp = shiftStartTimestamp;
        this.shiftEndTimestamp = shiftEndTimestamp;
        this.otherFlags = otherFlags;
    }

    public UInteger getId() {
        return this.id;
    }

    public DriverStates setId(UInteger id) {
        this.id = id;
        return this;
    }

    public UInteger getDriverId() {
        return this.driverId;
    }

    public DriverStates setDriverId(UInteger driverId) {
        this.driverId = driverId;
        return this;
    }

    public String getDriverState() {
        return this.driverState;
    }

    public DriverStates setDriverState(String driverState) {
        this.driverState = driverState;
        return this;
    }

    public String getVehicleNumber() {
        return this.vehicleNumber;
    }

    public DriverStates setVehicleNumber(String vehicleNumber) {
        this.vehicleNumber = vehicleNumber;
        return this;
    }

    public Byte getIsActive() {
        return this.isActive;
    }

    public DriverStates setIsActive(Byte isActive) {
        this.isActive = isActive;
        return this;
    }

    public Long getCreatedTimestamp() {
        return this.createdTimestamp;
    }

    public DriverStates setCreatedTimestamp(Long createdTimestamp) {
        this.createdTimestamp = createdTimestamp;
        return this;
    }

    public Long getLastUpdatedTimestamp() {
        return this.lastUpdatedTimestamp;
    }

    public DriverStates setLastUpdatedTimestamp(Long lastUpdatedTimestamp) {
        this.lastUpdatedTimestamp = lastUpdatedTimestamp;
        return this;
    }

    public UInteger getCreatedBy() {
        return this.createdBy;
    }

    public DriverStates setCreatedBy(UInteger createdBy) {
        this.createdBy = createdBy;
        return this;
    }

    public UInteger getLastUpdatedBy() {
        return this.lastUpdatedBy;
    }

    public DriverStates setLastUpdatedBy(UInteger lastUpdatedBy) {
        this.lastUpdatedBy = lastUpdatedBy;
        return this;
    }

    public UInteger getRideId() {
        return this.rideId;
    }

    public DriverStates setRideId(UInteger rideId) {
        this.rideId = rideId;
        return this;
    }

    public BigDecimal getLatitude() {
        return this.latitude;
    }

    public DriverStates setLatitude(BigDecimal latitude) {
        this.latitude = latitude;
        return this;
    }

    public BigDecimal getLongitude() {
        return this.longitude;
    }

    public DriverStates setLongitude(BigDecimal longitude) {
        this.longitude = longitude;
        return this;
    }

    public Byte getIsPaused() {
        return this.isPaused;
    }

    public DriverStates setIsPaused(Byte isPaused) {
        this.isPaused = isPaused;
        return this;
    }

    public Long getNextEligibleTimestamp() {
        return this.nextEligibleTimestamp;
    }

    public DriverStates setNextEligibleTimestamp(Long nextEligibleTimestamp) {
        this.nextEligibleTimestamp = nextEligibleTimestamp;
        return this;
    }

    public String getCurrentDestination() {
        return this.currentDestination;
    }

    public DriverStates setCurrentDestination(String currentDestination) {
        this.currentDestination = currentDestination;
        return this;
    }

    public String getDestinationStatus() {
        return this.destinationStatus;
    }

    public DriverStates setDestinationStatus(String destinationStatus) {
        this.destinationStatus = destinationStatus;
        return this;
    }

    public Byte getIsSocRequired() {
        return this.isSocRequired;
    }

    public DriverStates setIsSocRequired(Byte isSocRequired) {
        this.isSocRequired = isSocRequired;
        return this;
    }

    public Integer getPausedBy() {
        return this.pausedBy;
    }

    public DriverStates setPausedBy(Integer pausedBy) {
        this.pausedBy = pausedBy;
        return this;
    }

    public String getPauseReason() {
        return this.pauseReason;
    }

    public DriverStates setPauseReason(String pauseReason) {
        this.pauseReason = pauseReason;
        return this;
    }

    public Long getShiftStartTimestamp() {
        return this.shiftStartTimestamp;
    }

    public DriverStates setShiftStartTimestamp(Long shiftStartTimestamp) {
        this.shiftStartTimestamp = shiftStartTimestamp;
        return this;
    }

    public Long getShiftEndTimestamp() {
        return this.shiftEndTimestamp;
    }

    public DriverStates setShiftEndTimestamp(Long shiftEndTimestamp) {
        this.shiftEndTimestamp = shiftEndTimestamp;
        return this;
    }

    public String getOtherFlags() {
        return this.otherFlags;
    }

    public DriverStates setOtherFlags(String otherFlags) {
        this.otherFlags = otherFlags;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final DriverStates other = (DriverStates) obj;
        if (id == null) {
            if (other.id != null)
                return false;
        }
        else if (!id.equals(other.id))
            return false;
        if (driverId == null) {
            if (other.driverId != null)
                return false;
        }
        else if (!driverId.equals(other.driverId))
            return false;
        if (driverState == null) {
            if (other.driverState != null)
                return false;
        }
        else if (!driverState.equals(other.driverState))
            return false;
        if (vehicleNumber == null) {
            if (other.vehicleNumber != null)
                return false;
        }
        else if (!vehicleNumber.equals(other.vehicleNumber))
            return false;
        if (isActive == null) {
            if (other.isActive != null)
                return false;
        }
        else if (!isActive.equals(other.isActive))
            return false;
        if (createdTimestamp == null) {
            if (other.createdTimestamp != null)
                return false;
        }
        else if (!createdTimestamp.equals(other.createdTimestamp))
            return false;
        if (lastUpdatedTimestamp == null) {
            if (other.lastUpdatedTimestamp != null)
                return false;
        }
        else if (!lastUpdatedTimestamp.equals(other.lastUpdatedTimestamp))
            return false;
        if (createdBy == null) {
            if (other.createdBy != null)
                return false;
        }
        else if (!createdBy.equals(other.createdBy))
            return false;
        if (lastUpdatedBy == null) {
            if (other.lastUpdatedBy != null)
                return false;
        }
        else if (!lastUpdatedBy.equals(other.lastUpdatedBy))
            return false;
        if (rideId == null) {
            if (other.rideId != null)
                return false;
        }
        else if (!rideId.equals(other.rideId))
            return false;
        if (latitude == null) {
            if (other.latitude != null)
                return false;
        }
        else if (!latitude.equals(other.latitude))
            return false;
        if (longitude == null) {
            if (other.longitude != null)
                return false;
        }
        else if (!longitude.equals(other.longitude))
            return false;
        if (isPaused == null) {
            if (other.isPaused != null)
                return false;
        }
        else if (!isPaused.equals(other.isPaused))
            return false;
        if (nextEligibleTimestamp == null) {
            if (other.nextEligibleTimestamp != null)
                return false;
        }
        else if (!nextEligibleTimestamp.equals(other.nextEligibleTimestamp))
            return false;
        if (currentDestination == null) {
            if (other.currentDestination != null)
                return false;
        }
        else if (!currentDestination.equals(other.currentDestination))
            return false;
        if (destinationStatus == null) {
            if (other.destinationStatus != null)
                return false;
        }
        else if (!destinationStatus.equals(other.destinationStatus))
            return false;
        if (isSocRequired == null) {
            if (other.isSocRequired != null)
                return false;
        }
        else if (!isSocRequired.equals(other.isSocRequired))
            return false;
        if (pausedBy == null) {
            if (other.pausedBy != null)
                return false;
        }
        else if (!pausedBy.equals(other.pausedBy))
            return false;
        if (pauseReason == null) {
            if (other.pauseReason != null)
                return false;
        }
        else if (!pauseReason.equals(other.pauseReason))
            return false;
        if (shiftStartTimestamp == null) {
            if (other.shiftStartTimestamp != null)
                return false;
        }
        else if (!shiftStartTimestamp.equals(other.shiftStartTimestamp))
            return false;
        if (shiftEndTimestamp == null) {
            if (other.shiftEndTimestamp != null)
                return false;
        }
        else if (!shiftEndTimestamp.equals(other.shiftEndTimestamp))
            return false;
        if (otherFlags == null) {
            if (other.otherFlags != null)
                return false;
        }
        else if (!otherFlags.equals(other.otherFlags))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.driverId == null) ? 0 : this.driverId.hashCode());
        result = prime * result + ((this.driverState == null) ? 0 : this.driverState.hashCode());
        result = prime * result + ((this.vehicleNumber == null) ? 0 : this.vehicleNumber.hashCode());
        result = prime * result + ((this.isActive == null) ? 0 : this.isActive.hashCode());
        result = prime * result + ((this.createdTimestamp == null) ? 0 : this.createdTimestamp.hashCode());
        result = prime * result + ((this.lastUpdatedTimestamp == null) ? 0 : this.lastUpdatedTimestamp.hashCode());
        result = prime * result + ((this.createdBy == null) ? 0 : this.createdBy.hashCode());
        result = prime * result + ((this.lastUpdatedBy == null) ? 0 : this.lastUpdatedBy.hashCode());
        result = prime * result + ((this.rideId == null) ? 0 : this.rideId.hashCode());
        result = prime * result + ((this.latitude == null) ? 0 : this.latitude.hashCode());
        result = prime * result + ((this.longitude == null) ? 0 : this.longitude.hashCode());
        result = prime * result + ((this.isPaused == null) ? 0 : this.isPaused.hashCode());
        result = prime * result + ((this.nextEligibleTimestamp == null) ? 0 : this.nextEligibleTimestamp.hashCode());
        result = prime * result + ((this.currentDestination == null) ? 0 : this.currentDestination.hashCode());
        result = prime * result + ((this.destinationStatus == null) ? 0 : this.destinationStatus.hashCode());
        result = prime * result + ((this.isSocRequired == null) ? 0 : this.isSocRequired.hashCode());
        result = prime * result + ((this.pausedBy == null) ? 0 : this.pausedBy.hashCode());
        result = prime * result + ((this.pauseReason == null) ? 0 : this.pauseReason.hashCode());
        result = prime * result + ((this.shiftStartTimestamp == null) ? 0 : this.shiftStartTimestamp.hashCode());
        result = prime * result + ((this.shiftEndTimestamp == null) ? 0 : this.shiftEndTimestamp.hashCode());
        result = prime * result + ((this.otherFlags == null) ? 0 : this.otherFlags.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("DriverStates (");

        sb.append(id);
        sb.append(", ").append(driverId);
        sb.append(", ").append(driverState);
        sb.append(", ").append(vehicleNumber);
        sb.append(", ").append(isActive);
        sb.append(", ").append(createdTimestamp);
        sb.append(", ").append(lastUpdatedTimestamp);
        sb.append(", ").append(createdBy);
        sb.append(", ").append(lastUpdatedBy);
        sb.append(", ").append(rideId);
        sb.append(", ").append(latitude);
        sb.append(", ").append(longitude);
        sb.append(", ").append(isPaused);
        sb.append(", ").append(nextEligibleTimestamp);
        sb.append(", ").append(currentDestination);
        sb.append(", ").append(destinationStatus);
        sb.append(", ").append(isSocRequired);
        sb.append(", ").append(pausedBy);
        sb.append(", ").append(pauseReason);
        sb.append(", ").append(shiftStartTimestamp);
        sb.append(", ").append(shiftEndTimestamp);
        sb.append(", ").append(otherFlags);

        sb.append(")");
        return sb.toString();
    }
}
