/*
 * This file is generated by jOOQ.
 */
package com.blusmart_dev.database.tables.pojos;


import java.io.Serializable;
import java.math.BigDecimal;

import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OverwritingFarePrice implements Serializable {

    private static final long serialVersionUID = -1858599412;

    private UInteger   id;
    private String     fromAddress;
    private BigDecimal fromLat;
    private BigDecimal fromLong;
    private Integer    fromRadius;
    private String     toAddress;
    private BigDecimal toLat;
    private BigDecimal toLong;
    private Integer    toRadius;
    private UInteger   systemFare;
    private UInteger   actualFare;
    private Byte       status;
    private Byte       isActive;
    private Long       createdTimestamp;
    private Long       lastUpdatedTimestamp;
    private UInteger   createdBy;
    private UInteger   lastUpdatedBy;

    public OverwritingFarePrice() {}

    public OverwritingFarePrice(OverwritingFarePrice value) {
        this.id = value.id;
        this.fromAddress = value.fromAddress;
        this.fromLat = value.fromLat;
        this.fromLong = value.fromLong;
        this.fromRadius = value.fromRadius;
        this.toAddress = value.toAddress;
        this.toLat = value.toLat;
        this.toLong = value.toLong;
        this.toRadius = value.toRadius;
        this.systemFare = value.systemFare;
        this.actualFare = value.actualFare;
        this.status = value.status;
        this.isActive = value.isActive;
        this.createdTimestamp = value.createdTimestamp;
        this.lastUpdatedTimestamp = value.lastUpdatedTimestamp;
        this.createdBy = value.createdBy;
        this.lastUpdatedBy = value.lastUpdatedBy;
    }

    public OverwritingFarePrice(
        UInteger   id,
        String     fromAddress,
        BigDecimal fromLat,
        BigDecimal fromLong,
        Integer    fromRadius,
        String     toAddress,
        BigDecimal toLat,
        BigDecimal toLong,
        Integer    toRadius,
        UInteger   systemFare,
        UInteger   actualFare,
        Byte       status,
        Byte       isActive,
        Long       createdTimestamp,
        Long       lastUpdatedTimestamp,
        UInteger   createdBy,
        UInteger   lastUpdatedBy
    ) {
        this.id = id;
        this.fromAddress = fromAddress;
        this.fromLat = fromLat;
        this.fromLong = fromLong;
        this.fromRadius = fromRadius;
        this.toAddress = toAddress;
        this.toLat = toLat;
        this.toLong = toLong;
        this.toRadius = toRadius;
        this.systemFare = systemFare;
        this.actualFare = actualFare;
        this.status = status;
        this.isActive = isActive;
        this.createdTimestamp = createdTimestamp;
        this.lastUpdatedTimestamp = lastUpdatedTimestamp;
        this.createdBy = createdBy;
        this.lastUpdatedBy = lastUpdatedBy;
    }

    public UInteger getId() {
        return this.id;
    }

    public OverwritingFarePrice setId(UInteger id) {
        this.id = id;
        return this;
    }

    public String getFromAddress() {
        return this.fromAddress;
    }

    public OverwritingFarePrice setFromAddress(String fromAddress) {
        this.fromAddress = fromAddress;
        return this;
    }

    public BigDecimal getFromLat() {
        return this.fromLat;
    }

    public OverwritingFarePrice setFromLat(BigDecimal fromLat) {
        this.fromLat = fromLat;
        return this;
    }

    public BigDecimal getFromLong() {
        return this.fromLong;
    }

    public OverwritingFarePrice setFromLong(BigDecimal fromLong) {
        this.fromLong = fromLong;
        return this;
    }

    public Integer getFromRadius() {
        return this.fromRadius;
    }

    public OverwritingFarePrice setFromRadius(Integer fromRadius) {
        this.fromRadius = fromRadius;
        return this;
    }

    public String getToAddress() {
        return this.toAddress;
    }

    public OverwritingFarePrice setToAddress(String toAddress) {
        this.toAddress = toAddress;
        return this;
    }

    public BigDecimal getToLat() {
        return this.toLat;
    }

    public OverwritingFarePrice setToLat(BigDecimal toLat) {
        this.toLat = toLat;
        return this;
    }

    public BigDecimal getToLong() {
        return this.toLong;
    }

    public OverwritingFarePrice setToLong(BigDecimal toLong) {
        this.toLong = toLong;
        return this;
    }

    public Integer getToRadius() {
        return this.toRadius;
    }

    public OverwritingFarePrice setToRadius(Integer toRadius) {
        this.toRadius = toRadius;
        return this;
    }

    public UInteger getSystemFare() {
        return this.systemFare;
    }

    public OverwritingFarePrice setSystemFare(UInteger systemFare) {
        this.systemFare = systemFare;
        return this;
    }

    public UInteger getActualFare() {
        return this.actualFare;
    }

    public OverwritingFarePrice setActualFare(UInteger actualFare) {
        this.actualFare = actualFare;
        return this;
    }

    public Byte getStatus() {
        return this.status;
    }

    public OverwritingFarePrice setStatus(Byte status) {
        this.status = status;
        return this;
    }

    public Byte getIsActive() {
        return this.isActive;
    }

    public OverwritingFarePrice setIsActive(Byte isActive) {
        this.isActive = isActive;
        return this;
    }

    public Long getCreatedTimestamp() {
        return this.createdTimestamp;
    }

    public OverwritingFarePrice setCreatedTimestamp(Long createdTimestamp) {
        this.createdTimestamp = createdTimestamp;
        return this;
    }

    public Long getLastUpdatedTimestamp() {
        return this.lastUpdatedTimestamp;
    }

    public OverwritingFarePrice setLastUpdatedTimestamp(Long lastUpdatedTimestamp) {
        this.lastUpdatedTimestamp = lastUpdatedTimestamp;
        return this;
    }

    public UInteger getCreatedBy() {
        return this.createdBy;
    }

    public OverwritingFarePrice setCreatedBy(UInteger createdBy) {
        this.createdBy = createdBy;
        return this;
    }

    public UInteger getLastUpdatedBy() {
        return this.lastUpdatedBy;
    }

    public OverwritingFarePrice setLastUpdatedBy(UInteger lastUpdatedBy) {
        this.lastUpdatedBy = lastUpdatedBy;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final OverwritingFarePrice other = (OverwritingFarePrice) obj;
        if (id == null) {
            if (other.id != null)
                return false;
        }
        else if (!id.equals(other.id))
            return false;
        if (fromAddress == null) {
            if (other.fromAddress != null)
                return false;
        }
        else if (!fromAddress.equals(other.fromAddress))
            return false;
        if (fromLat == null) {
            if (other.fromLat != null)
                return false;
        }
        else if (!fromLat.equals(other.fromLat))
            return false;
        if (fromLong == null) {
            if (other.fromLong != null)
                return false;
        }
        else if (!fromLong.equals(other.fromLong))
            return false;
        if (fromRadius == null) {
            if (other.fromRadius != null)
                return false;
        }
        else if (!fromRadius.equals(other.fromRadius))
            return false;
        if (toAddress == null) {
            if (other.toAddress != null)
                return false;
        }
        else if (!toAddress.equals(other.toAddress))
            return false;
        if (toLat == null) {
            if (other.toLat != null)
                return false;
        }
        else if (!toLat.equals(other.toLat))
            return false;
        if (toLong == null) {
            if (other.toLong != null)
                return false;
        }
        else if (!toLong.equals(other.toLong))
            return false;
        if (toRadius == null) {
            if (other.toRadius != null)
                return false;
        }
        else if (!toRadius.equals(other.toRadius))
            return false;
        if (systemFare == null) {
            if (other.systemFare != null)
                return false;
        }
        else if (!systemFare.equals(other.systemFare))
            return false;
        if (actualFare == null) {
            if (other.actualFare != null)
                return false;
        }
        else if (!actualFare.equals(other.actualFare))
            return false;
        if (status == null) {
            if (other.status != null)
                return false;
        }
        else if (!status.equals(other.status))
            return false;
        if (isActive == null) {
            if (other.isActive != null)
                return false;
        }
        else if (!isActive.equals(other.isActive))
            return false;
        if (createdTimestamp == null) {
            if (other.createdTimestamp != null)
                return false;
        }
        else if (!createdTimestamp.equals(other.createdTimestamp))
            return false;
        if (lastUpdatedTimestamp == null) {
            if (other.lastUpdatedTimestamp != null)
                return false;
        }
        else if (!lastUpdatedTimestamp.equals(other.lastUpdatedTimestamp))
            return false;
        if (createdBy == null) {
            if (other.createdBy != null)
                return false;
        }
        else if (!createdBy.equals(other.createdBy))
            return false;
        if (lastUpdatedBy == null) {
            if (other.lastUpdatedBy != null)
                return false;
        }
        else if (!lastUpdatedBy.equals(other.lastUpdatedBy))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.fromAddress == null) ? 0 : this.fromAddress.hashCode());
        result = prime * result + ((this.fromLat == null) ? 0 : this.fromLat.hashCode());
        result = prime * result + ((this.fromLong == null) ? 0 : this.fromLong.hashCode());
        result = prime * result + ((this.fromRadius == null) ? 0 : this.fromRadius.hashCode());
        result = prime * result + ((this.toAddress == null) ? 0 : this.toAddress.hashCode());
        result = prime * result + ((this.toLat == null) ? 0 : this.toLat.hashCode());
        result = prime * result + ((this.toLong == null) ? 0 : this.toLong.hashCode());
        result = prime * result + ((this.toRadius == null) ? 0 : this.toRadius.hashCode());
        result = prime * result + ((this.systemFare == null) ? 0 : this.systemFare.hashCode());
        result = prime * result + ((this.actualFare == null) ? 0 : this.actualFare.hashCode());
        result = prime * result + ((this.status == null) ? 0 : this.status.hashCode());
        result = prime * result + ((this.isActive == null) ? 0 : this.isActive.hashCode());
        result = prime * result + ((this.createdTimestamp == null) ? 0 : this.createdTimestamp.hashCode());
        result = prime * result + ((this.lastUpdatedTimestamp == null) ? 0 : this.lastUpdatedTimestamp.hashCode());
        result = prime * result + ((this.createdBy == null) ? 0 : this.createdBy.hashCode());
        result = prime * result + ((this.lastUpdatedBy == null) ? 0 : this.lastUpdatedBy.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("OverwritingFarePrice (");

        sb.append(id);
        sb.append(", ").append(fromAddress);
        sb.append(", ").append(fromLat);
        sb.append(", ").append(fromLong);
        sb.append(", ").append(fromRadius);
        sb.append(", ").append(toAddress);
        sb.append(", ").append(toLat);
        sb.append(", ").append(toLong);
        sb.append(", ").append(toRadius);
        sb.append(", ").append(systemFare);
        sb.append(", ").append(actualFare);
        sb.append(", ").append(status);
        sb.append(", ").append(isActive);
        sb.append(", ").append(createdTimestamp);
        sb.append(", ").append(lastUpdatedTimestamp);
        sb.append(", ").append(createdBy);
        sb.append(", ").append(lastUpdatedBy);

        sb.append(")");
        return sb.toString();
    }
}
