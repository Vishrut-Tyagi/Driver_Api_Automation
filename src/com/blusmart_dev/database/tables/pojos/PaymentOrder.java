/*
 * This file is generated by jOOQ.
 */
package com.blusmart_dev.database.tables.pojos;


import java.io.Serializable;
import java.math.BigDecimal;

import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PaymentOrder implements Serializable {

    private static final long serialVersionUID = 784055651;

    private UInteger   orderId;
    private String     orderType;
    private BigDecimal amount;
    private UInteger   rideId;
    private Byte       isActive;
    private String     orderStatus;
    private Long       createdTimestamp;
    private Long       lastUpdatedTimestamp;
    private Integer    riderId;
    private String     paymentMode;
    private String     refundStatus;
    private UInteger   refundOrderId;
    private String     errorLog;
    private UInteger   createdBy;
    private UInteger   lastUpdatedBy;
    private UInteger   rideRequestId;
    private String     extraData;
    private Integer    ridecellRiderId;
    private String     paytmPreAuthId;
    private UInteger   paymentTransactionId;
    private BigDecimal captureAmount;
    private Long       blockDuration;
    private BigDecimal pendingAmount;
    private String     orderIdForPayment;
    private Byte       markForRefund;
    private BigDecimal blockAmount;
    private BigDecimal releaseAmount;
    private UInteger   userId;
    private UInteger   businessAccountId;
    private UInteger   driverId;

    public PaymentOrder() {}

    public PaymentOrder(PaymentOrder value) {
        this.orderId = value.orderId;
        this.orderType = value.orderType;
        this.amount = value.amount;
        this.rideId = value.rideId;
        this.isActive = value.isActive;
        this.orderStatus = value.orderStatus;
        this.createdTimestamp = value.createdTimestamp;
        this.lastUpdatedTimestamp = value.lastUpdatedTimestamp;
        this.riderId = value.riderId;
        this.paymentMode = value.paymentMode;
        this.refundStatus = value.refundStatus;
        this.refundOrderId = value.refundOrderId;
        this.errorLog = value.errorLog;
        this.createdBy = value.createdBy;
        this.lastUpdatedBy = value.lastUpdatedBy;
        this.rideRequestId = value.rideRequestId;
        this.extraData = value.extraData;
        this.ridecellRiderId = value.ridecellRiderId;
        this.paytmPreAuthId = value.paytmPreAuthId;
        this.paymentTransactionId = value.paymentTransactionId;
        this.captureAmount = value.captureAmount;
        this.blockDuration = value.blockDuration;
        this.pendingAmount = value.pendingAmount;
        this.orderIdForPayment = value.orderIdForPayment;
        this.markForRefund = value.markForRefund;
        this.blockAmount = value.blockAmount;
        this.releaseAmount = value.releaseAmount;
        this.userId = value.userId;
        this.businessAccountId = value.businessAccountId;
        this.driverId = value.driverId;
    }

    public PaymentOrder(
        UInteger   orderId,
        String     orderType,
        BigDecimal amount,
        UInteger   rideId,
        Byte       isActive,
        String     orderStatus,
        Long       createdTimestamp,
        Long       lastUpdatedTimestamp,
        Integer    riderId,
        String     paymentMode,
        String     refundStatus,
        UInteger   refundOrderId,
        String     errorLog,
        UInteger   createdBy,
        UInteger   lastUpdatedBy,
        UInteger   rideRequestId,
        String     extraData,
        Integer    ridecellRiderId,
        String     paytmPreAuthId,
        UInteger   paymentTransactionId,
        BigDecimal captureAmount,
        Long       blockDuration,
        BigDecimal pendingAmount,
        String     orderIdForPayment,
        Byte       markForRefund,
        BigDecimal blockAmount,
        BigDecimal releaseAmount,
        UInteger   userId,
        UInteger   businessAccountId,
        UInteger   driverId
    ) {
        this.orderId = orderId;
        this.orderType = orderType;
        this.amount = amount;
        this.rideId = rideId;
        this.isActive = isActive;
        this.orderStatus = orderStatus;
        this.createdTimestamp = createdTimestamp;
        this.lastUpdatedTimestamp = lastUpdatedTimestamp;
        this.riderId = riderId;
        this.paymentMode = paymentMode;
        this.refundStatus = refundStatus;
        this.refundOrderId = refundOrderId;
        this.errorLog = errorLog;
        this.createdBy = createdBy;
        this.lastUpdatedBy = lastUpdatedBy;
        this.rideRequestId = rideRequestId;
        this.extraData = extraData;
        this.ridecellRiderId = ridecellRiderId;
        this.paytmPreAuthId = paytmPreAuthId;
        this.paymentTransactionId = paymentTransactionId;
        this.captureAmount = captureAmount;
        this.blockDuration = blockDuration;
        this.pendingAmount = pendingAmount;
        this.orderIdForPayment = orderIdForPayment;
        this.markForRefund = markForRefund;
        this.blockAmount = blockAmount;
        this.releaseAmount = releaseAmount;
        this.userId = userId;
        this.businessAccountId = businessAccountId;
        this.driverId = driverId;
    }

    public UInteger getOrderId() {
        return this.orderId;
    }

    public PaymentOrder setOrderId(UInteger orderId) {
        this.orderId = orderId;
        return this;
    }

    public String getOrderType() {
        return this.orderType;
    }

    public PaymentOrder setOrderType(String orderType) {
        this.orderType = orderType;
        return this;
    }

    public BigDecimal getAmount() {
        return this.amount;
    }

    public PaymentOrder setAmount(BigDecimal amount) {
        this.amount = amount;
        return this;
    }

    public UInteger getRideId() {
        return this.rideId;
    }

    public PaymentOrder setRideId(UInteger rideId) {
        this.rideId = rideId;
        return this;
    }

    public Byte getIsActive() {
        return this.isActive;
    }

    public PaymentOrder setIsActive(Byte isActive) {
        this.isActive = isActive;
        return this;
    }

    public String getOrderStatus() {
        return this.orderStatus;
    }

    public PaymentOrder setOrderStatus(String orderStatus) {
        this.orderStatus = orderStatus;
        return this;
    }

    public Long getCreatedTimestamp() {
        return this.createdTimestamp;
    }

    public PaymentOrder setCreatedTimestamp(Long createdTimestamp) {
        this.createdTimestamp = createdTimestamp;
        return this;
    }

    public Long getLastUpdatedTimestamp() {
        return this.lastUpdatedTimestamp;
    }

    public PaymentOrder setLastUpdatedTimestamp(Long lastUpdatedTimestamp) {
        this.lastUpdatedTimestamp = lastUpdatedTimestamp;
        return this;
    }

    public Integer getRiderId() {
        return this.riderId;
    }

    public PaymentOrder setRiderId(Integer riderId) {
        this.riderId = riderId;
        return this;
    }

    public String getPaymentMode() {
        return this.paymentMode;
    }

    public PaymentOrder setPaymentMode(String paymentMode) {
        this.paymentMode = paymentMode;
        return this;
    }

    public String getRefundStatus() {
        return this.refundStatus;
    }

    public PaymentOrder setRefundStatus(String refundStatus) {
        this.refundStatus = refundStatus;
        return this;
    }

    public UInteger getRefundOrderId() {
        return this.refundOrderId;
    }

    public PaymentOrder setRefundOrderId(UInteger refundOrderId) {
        this.refundOrderId = refundOrderId;
        return this;
    }

    public String getErrorLog() {
        return this.errorLog;
    }

    public PaymentOrder setErrorLog(String errorLog) {
        this.errorLog = errorLog;
        return this;
    }

    public UInteger getCreatedBy() {
        return this.createdBy;
    }

    public PaymentOrder setCreatedBy(UInteger createdBy) {
        this.createdBy = createdBy;
        return this;
    }

    public UInteger getLastUpdatedBy() {
        return this.lastUpdatedBy;
    }

    public PaymentOrder setLastUpdatedBy(UInteger lastUpdatedBy) {
        this.lastUpdatedBy = lastUpdatedBy;
        return this;
    }

    public UInteger getRideRequestId() {
        return this.rideRequestId;
    }

    public PaymentOrder setRideRequestId(UInteger rideRequestId) {
        this.rideRequestId = rideRequestId;
        return this;
    }

    public String getExtraData() {
        return this.extraData;
    }

    public PaymentOrder setExtraData(String extraData) {
        this.extraData = extraData;
        return this;
    }

    public Integer getRidecellRiderId() {
        return this.ridecellRiderId;
    }

    public PaymentOrder setRidecellRiderId(Integer ridecellRiderId) {
        this.ridecellRiderId = ridecellRiderId;
        return this;
    }

    public String getPaytmPreAuthId() {
        return this.paytmPreAuthId;
    }

    public PaymentOrder setPaytmPreAuthId(String paytmPreAuthId) {
        this.paytmPreAuthId = paytmPreAuthId;
        return this;
    }

    public UInteger getPaymentTransactionId() {
        return this.paymentTransactionId;
    }

    public PaymentOrder setPaymentTransactionId(UInteger paymentTransactionId) {
        this.paymentTransactionId = paymentTransactionId;
        return this;
    }

    public BigDecimal getCaptureAmount() {
        return this.captureAmount;
    }

    public PaymentOrder setCaptureAmount(BigDecimal captureAmount) {
        this.captureAmount = captureAmount;
        return this;
    }

    public Long getBlockDuration() {
        return this.blockDuration;
    }

    public PaymentOrder setBlockDuration(Long blockDuration) {
        this.blockDuration = blockDuration;
        return this;
    }

    public BigDecimal getPendingAmount() {
        return this.pendingAmount;
    }

    public PaymentOrder setPendingAmount(BigDecimal pendingAmount) {
        this.pendingAmount = pendingAmount;
        return this;
    }

    public String getOrderIdForPayment() {
        return this.orderIdForPayment;
    }

    public PaymentOrder setOrderIdForPayment(String orderIdForPayment) {
        this.orderIdForPayment = orderIdForPayment;
        return this;
    }

    public Byte getMarkForRefund() {
        return this.markForRefund;
    }

    public PaymentOrder setMarkForRefund(Byte markForRefund) {
        this.markForRefund = markForRefund;
        return this;
    }

    public BigDecimal getBlockAmount() {
        return this.blockAmount;
    }

    public PaymentOrder setBlockAmount(BigDecimal blockAmount) {
        this.blockAmount = blockAmount;
        return this;
    }

    public BigDecimal getReleaseAmount() {
        return this.releaseAmount;
    }

    public PaymentOrder setReleaseAmount(BigDecimal releaseAmount) {
        this.releaseAmount = releaseAmount;
        return this;
    }

    public UInteger getUserId() {
        return this.userId;
    }

    public PaymentOrder setUserId(UInteger userId) {
        this.userId = userId;
        return this;
    }

    public UInteger getBusinessAccountId() {
        return this.businessAccountId;
    }

    public PaymentOrder setBusinessAccountId(UInteger businessAccountId) {
        this.businessAccountId = businessAccountId;
        return this;
    }

    public UInteger getDriverId() {
        return this.driverId;
    }

    public PaymentOrder setDriverId(UInteger driverId) {
        this.driverId = driverId;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final PaymentOrder other = (PaymentOrder) obj;
        if (orderId == null) {
            if (other.orderId != null)
                return false;
        }
        else if (!orderId.equals(other.orderId))
            return false;
        if (orderType == null) {
            if (other.orderType != null)
                return false;
        }
        else if (!orderType.equals(other.orderType))
            return false;
        if (amount == null) {
            if (other.amount != null)
                return false;
        }
        else if (!amount.equals(other.amount))
            return false;
        if (rideId == null) {
            if (other.rideId != null)
                return false;
        }
        else if (!rideId.equals(other.rideId))
            return false;
        if (isActive == null) {
            if (other.isActive != null)
                return false;
        }
        else if (!isActive.equals(other.isActive))
            return false;
        if (orderStatus == null) {
            if (other.orderStatus != null)
                return false;
        }
        else if (!orderStatus.equals(other.orderStatus))
            return false;
        if (createdTimestamp == null) {
            if (other.createdTimestamp != null)
                return false;
        }
        else if (!createdTimestamp.equals(other.createdTimestamp))
            return false;
        if (lastUpdatedTimestamp == null) {
            if (other.lastUpdatedTimestamp != null)
                return false;
        }
        else if (!lastUpdatedTimestamp.equals(other.lastUpdatedTimestamp))
            return false;
        if (riderId == null) {
            if (other.riderId != null)
                return false;
        }
        else if (!riderId.equals(other.riderId))
            return false;
        if (paymentMode == null) {
            if (other.paymentMode != null)
                return false;
        }
        else if (!paymentMode.equals(other.paymentMode))
            return false;
        if (refundStatus == null) {
            if (other.refundStatus != null)
                return false;
        }
        else if (!refundStatus.equals(other.refundStatus))
            return false;
        if (refundOrderId == null) {
            if (other.refundOrderId != null)
                return false;
        }
        else if (!refundOrderId.equals(other.refundOrderId))
            return false;
        if (errorLog == null) {
            if (other.errorLog != null)
                return false;
        }
        else if (!errorLog.equals(other.errorLog))
            return false;
        if (createdBy == null) {
            if (other.createdBy != null)
                return false;
        }
        else if (!createdBy.equals(other.createdBy))
            return false;
        if (lastUpdatedBy == null) {
            if (other.lastUpdatedBy != null)
                return false;
        }
        else if (!lastUpdatedBy.equals(other.lastUpdatedBy))
            return false;
        if (rideRequestId == null) {
            if (other.rideRequestId != null)
                return false;
        }
        else if (!rideRequestId.equals(other.rideRequestId))
            return false;
        if (extraData == null) {
            if (other.extraData != null)
                return false;
        }
        else if (!extraData.equals(other.extraData))
            return false;
        if (ridecellRiderId == null) {
            if (other.ridecellRiderId != null)
                return false;
        }
        else if (!ridecellRiderId.equals(other.ridecellRiderId))
            return false;
        if (paytmPreAuthId == null) {
            if (other.paytmPreAuthId != null)
                return false;
        }
        else if (!paytmPreAuthId.equals(other.paytmPreAuthId))
            return false;
        if (paymentTransactionId == null) {
            if (other.paymentTransactionId != null)
                return false;
        }
        else if (!paymentTransactionId.equals(other.paymentTransactionId))
            return false;
        if (captureAmount == null) {
            if (other.captureAmount != null)
                return false;
        }
        else if (!captureAmount.equals(other.captureAmount))
            return false;
        if (blockDuration == null) {
            if (other.blockDuration != null)
                return false;
        }
        else if (!blockDuration.equals(other.blockDuration))
            return false;
        if (pendingAmount == null) {
            if (other.pendingAmount != null)
                return false;
        }
        else if (!pendingAmount.equals(other.pendingAmount))
            return false;
        if (orderIdForPayment == null) {
            if (other.orderIdForPayment != null)
                return false;
        }
        else if (!orderIdForPayment.equals(other.orderIdForPayment))
            return false;
        if (markForRefund == null) {
            if (other.markForRefund != null)
                return false;
        }
        else if (!markForRefund.equals(other.markForRefund))
            return false;
        if (blockAmount == null) {
            if (other.blockAmount != null)
                return false;
        }
        else if (!blockAmount.equals(other.blockAmount))
            return false;
        if (releaseAmount == null) {
            if (other.releaseAmount != null)
                return false;
        }
        else if (!releaseAmount.equals(other.releaseAmount))
            return false;
        if (userId == null) {
            if (other.userId != null)
                return false;
        }
        else if (!userId.equals(other.userId))
            return false;
        if (businessAccountId == null) {
            if (other.businessAccountId != null)
                return false;
        }
        else if (!businessAccountId.equals(other.businessAccountId))
            return false;
        if (driverId == null) {
            if (other.driverId != null)
                return false;
        }
        else if (!driverId.equals(other.driverId))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.orderId == null) ? 0 : this.orderId.hashCode());
        result = prime * result + ((this.orderType == null) ? 0 : this.orderType.hashCode());
        result = prime * result + ((this.amount == null) ? 0 : this.amount.hashCode());
        result = prime * result + ((this.rideId == null) ? 0 : this.rideId.hashCode());
        result = prime * result + ((this.isActive == null) ? 0 : this.isActive.hashCode());
        result = prime * result + ((this.orderStatus == null) ? 0 : this.orderStatus.hashCode());
        result = prime * result + ((this.createdTimestamp == null) ? 0 : this.createdTimestamp.hashCode());
        result = prime * result + ((this.lastUpdatedTimestamp == null) ? 0 : this.lastUpdatedTimestamp.hashCode());
        result = prime * result + ((this.riderId == null) ? 0 : this.riderId.hashCode());
        result = prime * result + ((this.paymentMode == null) ? 0 : this.paymentMode.hashCode());
        result = prime * result + ((this.refundStatus == null) ? 0 : this.refundStatus.hashCode());
        result = prime * result + ((this.refundOrderId == null) ? 0 : this.refundOrderId.hashCode());
        result = prime * result + ((this.errorLog == null) ? 0 : this.errorLog.hashCode());
        result = prime * result + ((this.createdBy == null) ? 0 : this.createdBy.hashCode());
        result = prime * result + ((this.lastUpdatedBy == null) ? 0 : this.lastUpdatedBy.hashCode());
        result = prime * result + ((this.rideRequestId == null) ? 0 : this.rideRequestId.hashCode());
        result = prime * result + ((this.extraData == null) ? 0 : this.extraData.hashCode());
        result = prime * result + ((this.ridecellRiderId == null) ? 0 : this.ridecellRiderId.hashCode());
        result = prime * result + ((this.paytmPreAuthId == null) ? 0 : this.paytmPreAuthId.hashCode());
        result = prime * result + ((this.paymentTransactionId == null) ? 0 : this.paymentTransactionId.hashCode());
        result = prime * result + ((this.captureAmount == null) ? 0 : this.captureAmount.hashCode());
        result = prime * result + ((this.blockDuration == null) ? 0 : this.blockDuration.hashCode());
        result = prime * result + ((this.pendingAmount == null) ? 0 : this.pendingAmount.hashCode());
        result = prime * result + ((this.orderIdForPayment == null) ? 0 : this.orderIdForPayment.hashCode());
        result = prime * result + ((this.markForRefund == null) ? 0 : this.markForRefund.hashCode());
        result = prime * result + ((this.blockAmount == null) ? 0 : this.blockAmount.hashCode());
        result = prime * result + ((this.releaseAmount == null) ? 0 : this.releaseAmount.hashCode());
        result = prime * result + ((this.userId == null) ? 0 : this.userId.hashCode());
        result = prime * result + ((this.businessAccountId == null) ? 0 : this.businessAccountId.hashCode());
        result = prime * result + ((this.driverId == null) ? 0 : this.driverId.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("PaymentOrder (");

        sb.append(orderId);
        sb.append(", ").append(orderType);
        sb.append(", ").append(amount);
        sb.append(", ").append(rideId);
        sb.append(", ").append(isActive);
        sb.append(", ").append(orderStatus);
        sb.append(", ").append(createdTimestamp);
        sb.append(", ").append(lastUpdatedTimestamp);
        sb.append(", ").append(riderId);
        sb.append(", ").append(paymentMode);
        sb.append(", ").append(refundStatus);
        sb.append(", ").append(refundOrderId);
        sb.append(", ").append(errorLog);
        sb.append(", ").append(createdBy);
        sb.append(", ").append(lastUpdatedBy);
        sb.append(", ").append(rideRequestId);
        sb.append(", ").append(extraData);
        sb.append(", ").append(ridecellRiderId);
        sb.append(", ").append(paytmPreAuthId);
        sb.append(", ").append(paymentTransactionId);
        sb.append(", ").append(captureAmount);
        sb.append(", ").append(blockDuration);
        sb.append(", ").append(pendingAmount);
        sb.append(", ").append(orderIdForPayment);
        sb.append(", ").append(markForRefund);
        sb.append(", ").append(blockAmount);
        sb.append(", ").append(releaseAmount);
        sb.append(", ").append(userId);
        sb.append(", ").append(businessAccountId);
        sb.append(", ").append(driverId);

        sb.append(")");
        return sb.toString();
    }
}
