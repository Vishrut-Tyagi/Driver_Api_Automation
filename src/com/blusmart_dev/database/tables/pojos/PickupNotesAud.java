/*
 * This file is generated by jOOQ.
 */
package com.blusmart_dev.database.tables.pojos;


import java.io.Serializable;
import java.math.BigDecimal;

import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PickupNotesAud implements Serializable {

    private static final long serialVersionUID = 90970174;

    private UInteger   audId;
    private UInteger   id;
    private UInteger   riderId;
    private String     placeHash;
    private Byte       isForAll;
    private UInteger   rideRequestId;
    private BigDecimal latitude;
    private BigDecimal longitude;
    private String     notes;
    private Byte       isActive;
    private Long       createdTimestamp;
    private Long       lastUpdatedTimestamp;
    private UInteger   createdBy;
    private UInteger   lastUpdatedBy;

    public PickupNotesAud() {}

    public PickupNotesAud(PickupNotesAud value) {
        this.audId = value.audId;
        this.id = value.id;
        this.riderId = value.riderId;
        this.placeHash = value.placeHash;
        this.isForAll = value.isForAll;
        this.rideRequestId = value.rideRequestId;
        this.latitude = value.latitude;
        this.longitude = value.longitude;
        this.notes = value.notes;
        this.isActive = value.isActive;
        this.createdTimestamp = value.createdTimestamp;
        this.lastUpdatedTimestamp = value.lastUpdatedTimestamp;
        this.createdBy = value.createdBy;
        this.lastUpdatedBy = value.lastUpdatedBy;
    }

    public PickupNotesAud(
        UInteger   audId,
        UInteger   id,
        UInteger   riderId,
        String     placeHash,
        Byte       isForAll,
        UInteger   rideRequestId,
        BigDecimal latitude,
        BigDecimal longitude,
        String     notes,
        Byte       isActive,
        Long       createdTimestamp,
        Long       lastUpdatedTimestamp,
        UInteger   createdBy,
        UInteger   lastUpdatedBy
    ) {
        this.audId = audId;
        this.id = id;
        this.riderId = riderId;
        this.placeHash = placeHash;
        this.isForAll = isForAll;
        this.rideRequestId = rideRequestId;
        this.latitude = latitude;
        this.longitude = longitude;
        this.notes = notes;
        this.isActive = isActive;
        this.createdTimestamp = createdTimestamp;
        this.lastUpdatedTimestamp = lastUpdatedTimestamp;
        this.createdBy = createdBy;
        this.lastUpdatedBy = lastUpdatedBy;
    }

    public UInteger getAudId() {
        return this.audId;
    }

    public PickupNotesAud setAudId(UInteger audId) {
        this.audId = audId;
        return this;
    }

    public UInteger getId() {
        return this.id;
    }

    public PickupNotesAud setId(UInteger id) {
        this.id = id;
        return this;
    }

    public UInteger getRiderId() {
        return this.riderId;
    }

    public PickupNotesAud setRiderId(UInteger riderId) {
        this.riderId = riderId;
        return this;
    }

    public String getPlaceHash() {
        return this.placeHash;
    }

    public PickupNotesAud setPlaceHash(String placeHash) {
        this.placeHash = placeHash;
        return this;
    }

    public Byte getIsForAll() {
        return this.isForAll;
    }

    public PickupNotesAud setIsForAll(Byte isForAll) {
        this.isForAll = isForAll;
        return this;
    }

    public UInteger getRideRequestId() {
        return this.rideRequestId;
    }

    public PickupNotesAud setRideRequestId(UInteger rideRequestId) {
        this.rideRequestId = rideRequestId;
        return this;
    }

    public BigDecimal getLatitude() {
        return this.latitude;
    }

    public PickupNotesAud setLatitude(BigDecimal latitude) {
        this.latitude = latitude;
        return this;
    }

    public BigDecimal getLongitude() {
        return this.longitude;
    }

    public PickupNotesAud setLongitude(BigDecimal longitude) {
        this.longitude = longitude;
        return this;
    }

    public String getNotes() {
        return this.notes;
    }

    public PickupNotesAud setNotes(String notes) {
        this.notes = notes;
        return this;
    }

    public Byte getIsActive() {
        return this.isActive;
    }

    public PickupNotesAud setIsActive(Byte isActive) {
        this.isActive = isActive;
        return this;
    }

    public Long getCreatedTimestamp() {
        return this.createdTimestamp;
    }

    public PickupNotesAud setCreatedTimestamp(Long createdTimestamp) {
        this.createdTimestamp = createdTimestamp;
        return this;
    }

    public Long getLastUpdatedTimestamp() {
        return this.lastUpdatedTimestamp;
    }

    public PickupNotesAud setLastUpdatedTimestamp(Long lastUpdatedTimestamp) {
        this.lastUpdatedTimestamp = lastUpdatedTimestamp;
        return this;
    }

    public UInteger getCreatedBy() {
        return this.createdBy;
    }

    public PickupNotesAud setCreatedBy(UInteger createdBy) {
        this.createdBy = createdBy;
        return this;
    }

    public UInteger getLastUpdatedBy() {
        return this.lastUpdatedBy;
    }

    public PickupNotesAud setLastUpdatedBy(UInteger lastUpdatedBy) {
        this.lastUpdatedBy = lastUpdatedBy;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final PickupNotesAud other = (PickupNotesAud) obj;
        if (audId == null) {
            if (other.audId != null)
                return false;
        }
        else if (!audId.equals(other.audId))
            return false;
        if (id == null) {
            if (other.id != null)
                return false;
        }
        else if (!id.equals(other.id))
            return false;
        if (riderId == null) {
            if (other.riderId != null)
                return false;
        }
        else if (!riderId.equals(other.riderId))
            return false;
        if (placeHash == null) {
            if (other.placeHash != null)
                return false;
        }
        else if (!placeHash.equals(other.placeHash))
            return false;
        if (isForAll == null) {
            if (other.isForAll != null)
                return false;
        }
        else if (!isForAll.equals(other.isForAll))
            return false;
        if (rideRequestId == null) {
            if (other.rideRequestId != null)
                return false;
        }
        else if (!rideRequestId.equals(other.rideRequestId))
            return false;
        if (latitude == null) {
            if (other.latitude != null)
                return false;
        }
        else if (!latitude.equals(other.latitude))
            return false;
        if (longitude == null) {
            if (other.longitude != null)
                return false;
        }
        else if (!longitude.equals(other.longitude))
            return false;
        if (notes == null) {
            if (other.notes != null)
                return false;
        }
        else if (!notes.equals(other.notes))
            return false;
        if (isActive == null) {
            if (other.isActive != null)
                return false;
        }
        else if (!isActive.equals(other.isActive))
            return false;
        if (createdTimestamp == null) {
            if (other.createdTimestamp != null)
                return false;
        }
        else if (!createdTimestamp.equals(other.createdTimestamp))
            return false;
        if (lastUpdatedTimestamp == null) {
            if (other.lastUpdatedTimestamp != null)
                return false;
        }
        else if (!lastUpdatedTimestamp.equals(other.lastUpdatedTimestamp))
            return false;
        if (createdBy == null) {
            if (other.createdBy != null)
                return false;
        }
        else if (!createdBy.equals(other.createdBy))
            return false;
        if (lastUpdatedBy == null) {
            if (other.lastUpdatedBy != null)
                return false;
        }
        else if (!lastUpdatedBy.equals(other.lastUpdatedBy))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.audId == null) ? 0 : this.audId.hashCode());
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.riderId == null) ? 0 : this.riderId.hashCode());
        result = prime * result + ((this.placeHash == null) ? 0 : this.placeHash.hashCode());
        result = prime * result + ((this.isForAll == null) ? 0 : this.isForAll.hashCode());
        result = prime * result + ((this.rideRequestId == null) ? 0 : this.rideRequestId.hashCode());
        result = prime * result + ((this.latitude == null) ? 0 : this.latitude.hashCode());
        result = prime * result + ((this.longitude == null) ? 0 : this.longitude.hashCode());
        result = prime * result + ((this.notes == null) ? 0 : this.notes.hashCode());
        result = prime * result + ((this.isActive == null) ? 0 : this.isActive.hashCode());
        result = prime * result + ((this.createdTimestamp == null) ? 0 : this.createdTimestamp.hashCode());
        result = prime * result + ((this.lastUpdatedTimestamp == null) ? 0 : this.lastUpdatedTimestamp.hashCode());
        result = prime * result + ((this.createdBy == null) ? 0 : this.createdBy.hashCode());
        result = prime * result + ((this.lastUpdatedBy == null) ? 0 : this.lastUpdatedBy.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("PickupNotesAud (");

        sb.append(audId);
        sb.append(", ").append(id);
        sb.append(", ").append(riderId);
        sb.append(", ").append(placeHash);
        sb.append(", ").append(isForAll);
        sb.append(", ").append(rideRequestId);
        sb.append(", ").append(latitude);
        sb.append(", ").append(longitude);
        sb.append(", ").append(notes);
        sb.append(", ").append(isActive);
        sb.append(", ").append(createdTimestamp);
        sb.append(", ").append(lastUpdatedTimestamp);
        sb.append(", ").append(createdBy);
        sb.append(", ").append(lastUpdatedBy);

        sb.append(")");
        return sb.toString();
    }
}
