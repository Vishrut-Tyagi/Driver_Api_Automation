/*
 * This file is generated by jOOQ.
 */
package com.blusmart_dev.database.tables.pojos;


import java.io.Serializable;
import java.math.BigDecimal;

import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RecurringRidesDaily implements Serializable {

    private static final long serialVersionUID = -1802383106;

    private UInteger   id;
    private UInteger   recurringWeekId;
    private String     day;
    private Long       startTimestamp;
    private String     pickupLocation;
    private BigDecimal pickupLat;
    private BigDecimal pickupLng;
    private String     dropLocation;
    private BigDecimal dropLat;
    private BigDecimal dropLng;
    private UInteger   rideReqId;
    private String     state;
    private BigDecimal currentFare;
    private BigDecimal currentWalletBalance;
    private Byte       isActive;
    private UInteger   createdBy;
    private Long       createdAt;
    private UInteger   lastUpdatedBy;
    private Long       lastUpdatedAt;
    private String     note;
    private Integer    recurringRequestId;
    private Integer    riderId;
    private Long       estimatedEndTimestamp;

    public RecurringRidesDaily() {}

    public RecurringRidesDaily(RecurringRidesDaily value) {
        this.id = value.id;
        this.recurringWeekId = value.recurringWeekId;
        this.day = value.day;
        this.startTimestamp = value.startTimestamp;
        this.pickupLocation = value.pickupLocation;
        this.pickupLat = value.pickupLat;
        this.pickupLng = value.pickupLng;
        this.dropLocation = value.dropLocation;
        this.dropLat = value.dropLat;
        this.dropLng = value.dropLng;
        this.rideReqId = value.rideReqId;
        this.state = value.state;
        this.currentFare = value.currentFare;
        this.currentWalletBalance = value.currentWalletBalance;
        this.isActive = value.isActive;
        this.createdBy = value.createdBy;
        this.createdAt = value.createdAt;
        this.lastUpdatedBy = value.lastUpdatedBy;
        this.lastUpdatedAt = value.lastUpdatedAt;
        this.note = value.note;
        this.recurringRequestId = value.recurringRequestId;
        this.riderId = value.riderId;
        this.estimatedEndTimestamp = value.estimatedEndTimestamp;
    }

    public RecurringRidesDaily(
        UInteger   id,
        UInteger   recurringWeekId,
        String     day,
        Long       startTimestamp,
        String     pickupLocation,
        BigDecimal pickupLat,
        BigDecimal pickupLng,
        String     dropLocation,
        BigDecimal dropLat,
        BigDecimal dropLng,
        UInteger   rideReqId,
        String     state,
        BigDecimal currentFare,
        BigDecimal currentWalletBalance,
        Byte       isActive,
        UInteger   createdBy,
        Long       createdAt,
        UInteger   lastUpdatedBy,
        Long       lastUpdatedAt,
        String     note,
        Integer    recurringRequestId,
        Integer    riderId,
        Long       estimatedEndTimestamp
    ) {
        this.id = id;
        this.recurringWeekId = recurringWeekId;
        this.day = day;
        this.startTimestamp = startTimestamp;
        this.pickupLocation = pickupLocation;
        this.pickupLat = pickupLat;
        this.pickupLng = pickupLng;
        this.dropLocation = dropLocation;
        this.dropLat = dropLat;
        this.dropLng = dropLng;
        this.rideReqId = rideReqId;
        this.state = state;
        this.currentFare = currentFare;
        this.currentWalletBalance = currentWalletBalance;
        this.isActive = isActive;
        this.createdBy = createdBy;
        this.createdAt = createdAt;
        this.lastUpdatedBy = lastUpdatedBy;
        this.lastUpdatedAt = lastUpdatedAt;
        this.note = note;
        this.recurringRequestId = recurringRequestId;
        this.riderId = riderId;
        this.estimatedEndTimestamp = estimatedEndTimestamp;
    }

    public UInteger getId() {
        return this.id;
    }

    public RecurringRidesDaily setId(UInteger id) {
        this.id = id;
        return this;
    }

    public UInteger getRecurringWeekId() {
        return this.recurringWeekId;
    }

    public RecurringRidesDaily setRecurringWeekId(UInteger recurringWeekId) {
        this.recurringWeekId = recurringWeekId;
        return this;
    }

    public String getDay() {
        return this.day;
    }

    public RecurringRidesDaily setDay(String day) {
        this.day = day;
        return this;
    }

    public Long getStartTimestamp() {
        return this.startTimestamp;
    }

    public RecurringRidesDaily setStartTimestamp(Long startTimestamp) {
        this.startTimestamp = startTimestamp;
        return this;
    }

    public String getPickupLocation() {
        return this.pickupLocation;
    }

    public RecurringRidesDaily setPickupLocation(String pickupLocation) {
        this.pickupLocation = pickupLocation;
        return this;
    }

    public BigDecimal getPickupLat() {
        return this.pickupLat;
    }

    public RecurringRidesDaily setPickupLat(BigDecimal pickupLat) {
        this.pickupLat = pickupLat;
        return this;
    }

    public BigDecimal getPickupLng() {
        return this.pickupLng;
    }

    public RecurringRidesDaily setPickupLng(BigDecimal pickupLng) {
        this.pickupLng = pickupLng;
        return this;
    }

    public String getDropLocation() {
        return this.dropLocation;
    }

    public RecurringRidesDaily setDropLocation(String dropLocation) {
        this.dropLocation = dropLocation;
        return this;
    }

    public BigDecimal getDropLat() {
        return this.dropLat;
    }

    public RecurringRidesDaily setDropLat(BigDecimal dropLat) {
        this.dropLat = dropLat;
        return this;
    }

    public BigDecimal getDropLng() {
        return this.dropLng;
    }

    public RecurringRidesDaily setDropLng(BigDecimal dropLng) {
        this.dropLng = dropLng;
        return this;
    }

    public UInteger getRideReqId() {
        return this.rideReqId;
    }

    public RecurringRidesDaily setRideReqId(UInteger rideReqId) {
        this.rideReqId = rideReqId;
        return this;
    }

    public String getState() {
        return this.state;
    }

    public RecurringRidesDaily setState(String state) {
        this.state = state;
        return this;
    }

    public BigDecimal getCurrentFare() {
        return this.currentFare;
    }

    public RecurringRidesDaily setCurrentFare(BigDecimal currentFare) {
        this.currentFare = currentFare;
        return this;
    }

    public BigDecimal getCurrentWalletBalance() {
        return this.currentWalletBalance;
    }

    public RecurringRidesDaily setCurrentWalletBalance(BigDecimal currentWalletBalance) {
        this.currentWalletBalance = currentWalletBalance;
        return this;
    }

    public Byte getIsActive() {
        return this.isActive;
    }

    public RecurringRidesDaily setIsActive(Byte isActive) {
        this.isActive = isActive;
        return this;
    }

    public UInteger getCreatedBy() {
        return this.createdBy;
    }

    public RecurringRidesDaily setCreatedBy(UInteger createdBy) {
        this.createdBy = createdBy;
        return this;
    }

    public Long getCreatedAt() {
        return this.createdAt;
    }

    public RecurringRidesDaily setCreatedAt(Long createdAt) {
        this.createdAt = createdAt;
        return this;
    }

    public UInteger getLastUpdatedBy() {
        return this.lastUpdatedBy;
    }

    public RecurringRidesDaily setLastUpdatedBy(UInteger lastUpdatedBy) {
        this.lastUpdatedBy = lastUpdatedBy;
        return this;
    }

    public Long getLastUpdatedAt() {
        return this.lastUpdatedAt;
    }

    public RecurringRidesDaily setLastUpdatedAt(Long lastUpdatedAt) {
        this.lastUpdatedAt = lastUpdatedAt;
        return this;
    }

    public String getNote() {
        return this.note;
    }

    public RecurringRidesDaily setNote(String note) {
        this.note = note;
        return this;
    }

    public Integer getRecurringRequestId() {
        return this.recurringRequestId;
    }

    public RecurringRidesDaily setRecurringRequestId(Integer recurringRequestId) {
        this.recurringRequestId = recurringRequestId;
        return this;
    }

    public Integer getRiderId() {
        return this.riderId;
    }

    public RecurringRidesDaily setRiderId(Integer riderId) {
        this.riderId = riderId;
        return this;
    }

    public Long getEstimatedEndTimestamp() {
        return this.estimatedEndTimestamp;
    }

    public RecurringRidesDaily setEstimatedEndTimestamp(Long estimatedEndTimestamp) {
        this.estimatedEndTimestamp = estimatedEndTimestamp;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final RecurringRidesDaily other = (RecurringRidesDaily) obj;
        if (id == null) {
            if (other.id != null)
                return false;
        }
        else if (!id.equals(other.id))
            return false;
        if (recurringWeekId == null) {
            if (other.recurringWeekId != null)
                return false;
        }
        else if (!recurringWeekId.equals(other.recurringWeekId))
            return false;
        if (day == null) {
            if (other.day != null)
                return false;
        }
        else if (!day.equals(other.day))
            return false;
        if (startTimestamp == null) {
            if (other.startTimestamp != null)
                return false;
        }
        else if (!startTimestamp.equals(other.startTimestamp))
            return false;
        if (pickupLocation == null) {
            if (other.pickupLocation != null)
                return false;
        }
        else if (!pickupLocation.equals(other.pickupLocation))
            return false;
        if (pickupLat == null) {
            if (other.pickupLat != null)
                return false;
        }
        else if (!pickupLat.equals(other.pickupLat))
            return false;
        if (pickupLng == null) {
            if (other.pickupLng != null)
                return false;
        }
        else if (!pickupLng.equals(other.pickupLng))
            return false;
        if (dropLocation == null) {
            if (other.dropLocation != null)
                return false;
        }
        else if (!dropLocation.equals(other.dropLocation))
            return false;
        if (dropLat == null) {
            if (other.dropLat != null)
                return false;
        }
        else if (!dropLat.equals(other.dropLat))
            return false;
        if (dropLng == null) {
            if (other.dropLng != null)
                return false;
        }
        else if (!dropLng.equals(other.dropLng))
            return false;
        if (rideReqId == null) {
            if (other.rideReqId != null)
                return false;
        }
        else if (!rideReqId.equals(other.rideReqId))
            return false;
        if (state == null) {
            if (other.state != null)
                return false;
        }
        else if (!state.equals(other.state))
            return false;
        if (currentFare == null) {
            if (other.currentFare != null)
                return false;
        }
        else if (!currentFare.equals(other.currentFare))
            return false;
        if (currentWalletBalance == null) {
            if (other.currentWalletBalance != null)
                return false;
        }
        else if (!currentWalletBalance.equals(other.currentWalletBalance))
            return false;
        if (isActive == null) {
            if (other.isActive != null)
                return false;
        }
        else if (!isActive.equals(other.isActive))
            return false;
        if (createdBy == null) {
            if (other.createdBy != null)
                return false;
        }
        else if (!createdBy.equals(other.createdBy))
            return false;
        if (createdAt == null) {
            if (other.createdAt != null)
                return false;
        }
        else if (!createdAt.equals(other.createdAt))
            return false;
        if (lastUpdatedBy == null) {
            if (other.lastUpdatedBy != null)
                return false;
        }
        else if (!lastUpdatedBy.equals(other.lastUpdatedBy))
            return false;
        if (lastUpdatedAt == null) {
            if (other.lastUpdatedAt != null)
                return false;
        }
        else if (!lastUpdatedAt.equals(other.lastUpdatedAt))
            return false;
        if (note == null) {
            if (other.note != null)
                return false;
        }
        else if (!note.equals(other.note))
            return false;
        if (recurringRequestId == null) {
            if (other.recurringRequestId != null)
                return false;
        }
        else if (!recurringRequestId.equals(other.recurringRequestId))
            return false;
        if (riderId == null) {
            if (other.riderId != null)
                return false;
        }
        else if (!riderId.equals(other.riderId))
            return false;
        if (estimatedEndTimestamp == null) {
            if (other.estimatedEndTimestamp != null)
                return false;
        }
        else if (!estimatedEndTimestamp.equals(other.estimatedEndTimestamp))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.recurringWeekId == null) ? 0 : this.recurringWeekId.hashCode());
        result = prime * result + ((this.day == null) ? 0 : this.day.hashCode());
        result = prime * result + ((this.startTimestamp == null) ? 0 : this.startTimestamp.hashCode());
        result = prime * result + ((this.pickupLocation == null) ? 0 : this.pickupLocation.hashCode());
        result = prime * result + ((this.pickupLat == null) ? 0 : this.pickupLat.hashCode());
        result = prime * result + ((this.pickupLng == null) ? 0 : this.pickupLng.hashCode());
        result = prime * result + ((this.dropLocation == null) ? 0 : this.dropLocation.hashCode());
        result = prime * result + ((this.dropLat == null) ? 0 : this.dropLat.hashCode());
        result = prime * result + ((this.dropLng == null) ? 0 : this.dropLng.hashCode());
        result = prime * result + ((this.rideReqId == null) ? 0 : this.rideReqId.hashCode());
        result = prime * result + ((this.state == null) ? 0 : this.state.hashCode());
        result = prime * result + ((this.currentFare == null) ? 0 : this.currentFare.hashCode());
        result = prime * result + ((this.currentWalletBalance == null) ? 0 : this.currentWalletBalance.hashCode());
        result = prime * result + ((this.isActive == null) ? 0 : this.isActive.hashCode());
        result = prime * result + ((this.createdBy == null) ? 0 : this.createdBy.hashCode());
        result = prime * result + ((this.createdAt == null) ? 0 : this.createdAt.hashCode());
        result = prime * result + ((this.lastUpdatedBy == null) ? 0 : this.lastUpdatedBy.hashCode());
        result = prime * result + ((this.lastUpdatedAt == null) ? 0 : this.lastUpdatedAt.hashCode());
        result = prime * result + ((this.note == null) ? 0 : this.note.hashCode());
        result = prime * result + ((this.recurringRequestId == null) ? 0 : this.recurringRequestId.hashCode());
        result = prime * result + ((this.riderId == null) ? 0 : this.riderId.hashCode());
        result = prime * result + ((this.estimatedEndTimestamp == null) ? 0 : this.estimatedEndTimestamp.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("RecurringRidesDaily (");

        sb.append(id);
        sb.append(", ").append(recurringWeekId);
        sb.append(", ").append(day);
        sb.append(", ").append(startTimestamp);
        sb.append(", ").append(pickupLocation);
        sb.append(", ").append(pickupLat);
        sb.append(", ").append(pickupLng);
        sb.append(", ").append(dropLocation);
        sb.append(", ").append(dropLat);
        sb.append(", ").append(dropLng);
        sb.append(", ").append(rideReqId);
        sb.append(", ").append(state);
        sb.append(", ").append(currentFare);
        sb.append(", ").append(currentWalletBalance);
        sb.append(", ").append(isActive);
        sb.append(", ").append(createdBy);
        sb.append(", ").append(createdAt);
        sb.append(", ").append(lastUpdatedBy);
        sb.append(", ").append(lastUpdatedAt);
        sb.append(", ").append(note);
        sb.append(", ").append(recurringRequestId);
        sb.append(", ").append(riderId);
        sb.append(", ").append(estimatedEndTimestamp);

        sb.append(")");
        return sb.toString();
    }
}
