/*
 * This file is generated by jOOQ.
 */
package com.blusmart_dev.database.tables.pojos;


import java.io.Serializable;
import java.math.BigDecimal;

import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RideRequests implements Serializable {

    private static final long serialVersionUID = -838850978;

    private UInteger   id;
    private UInteger   riderId;
    private String     riderType;
    private String     requestState;
    private String     pickUpLocation;
    private String     dropLocation;
    private UInteger   verificationTokenId;
    private String     requestLocation;
    private BigDecimal pickUpLocationLat;
    private BigDecimal dropLocationLat;
    private BigDecimal requestLocationLat;
    private BigDecimal pickUpLocationLong;
    private BigDecimal dropLocationLong;
    private BigDecimal requestLocationLong;
    private Long       estimatedStartTimestamp;
    private Long       estimatedCompletionTimestamp;
    private BigDecimal estimatedAmount;
    private BigDecimal estimatedDistance;
    private Integer    noOfPassengers;
    private Byte       isActive;
    private Long       createdTimestamp;
    private Long       lastUpdatedTimestamp;
    private UInteger   createdBy;
    private UInteger   lastUpdatedBy;
    private String     paymentMode;
    private String     platform;
    private String     rideType;
    private UInteger   serviceRegionId;
    private UInteger   paymentOrderId;
    private String     cancellationReason;
    private String     pickupDropDirection;
    private String     flightNo;
    private String     pickDropPathId;
    private Long       eligibleTimestamp;
    private UInteger   ridecellTripId;
    private String     packageCode;
    private Integer    pricingDetailsId;
    private Long       confirmationTimestamp;
    private UInteger   ticketId;
    private Long       cancellationTimestamp;
    private String     promoCode;
    private String     source;
    private String     rideCategory;
    private String     otherFlags;
    private String     additionalPromo;
    private String     requestType;
    private Integer    bookedFor;
    private Integer    bookedBy;
    private Integer    priceMapId;

    public RideRequests() {}

    public RideRequests(RideRequests value) {
        this.id = value.id;
        this.riderId = value.riderId;
        this.riderType = value.riderType;
        this.requestState = value.requestState;
        this.pickUpLocation = value.pickUpLocation;
        this.dropLocation = value.dropLocation;
        this.verificationTokenId = value.verificationTokenId;
        this.requestLocation = value.requestLocation;
        this.pickUpLocationLat = value.pickUpLocationLat;
        this.dropLocationLat = value.dropLocationLat;
        this.requestLocationLat = value.requestLocationLat;
        this.pickUpLocationLong = value.pickUpLocationLong;
        this.dropLocationLong = value.dropLocationLong;
        this.requestLocationLong = value.requestLocationLong;
        this.estimatedStartTimestamp = value.estimatedStartTimestamp;
        this.estimatedCompletionTimestamp = value.estimatedCompletionTimestamp;
        this.estimatedAmount = value.estimatedAmount;
        this.estimatedDistance = value.estimatedDistance;
        this.noOfPassengers = value.noOfPassengers;
        this.isActive = value.isActive;
        this.createdTimestamp = value.createdTimestamp;
        this.lastUpdatedTimestamp = value.lastUpdatedTimestamp;
        this.createdBy = value.createdBy;
        this.lastUpdatedBy = value.lastUpdatedBy;
        this.paymentMode = value.paymentMode;
        this.platform = value.platform;
        this.rideType = value.rideType;
        this.serviceRegionId = value.serviceRegionId;
        this.paymentOrderId = value.paymentOrderId;
        this.cancellationReason = value.cancellationReason;
        this.pickupDropDirection = value.pickupDropDirection;
        this.flightNo = value.flightNo;
        this.pickDropPathId = value.pickDropPathId;
        this.eligibleTimestamp = value.eligibleTimestamp;
        this.ridecellTripId = value.ridecellTripId;
        this.packageCode = value.packageCode;
        this.pricingDetailsId = value.pricingDetailsId;
        this.confirmationTimestamp = value.confirmationTimestamp;
        this.ticketId = value.ticketId;
        this.cancellationTimestamp = value.cancellationTimestamp;
        this.promoCode = value.promoCode;
        this.source = value.source;
        this.rideCategory = value.rideCategory;
        this.otherFlags = value.otherFlags;
        this.additionalPromo = value.additionalPromo;
        this.requestType = value.requestType;
        this.bookedFor = value.bookedFor;
        this.bookedBy = value.bookedBy;
        this.priceMapId = value.priceMapId;
    }

    public RideRequests(
        UInteger   id,
        UInteger   riderId,
        String     riderType,
        String     requestState,
        String     pickUpLocation,
        String     dropLocation,
        UInteger   verificationTokenId,
        String     requestLocation,
        BigDecimal pickUpLocationLat,
        BigDecimal dropLocationLat,
        BigDecimal requestLocationLat,
        BigDecimal pickUpLocationLong,
        BigDecimal dropLocationLong,
        BigDecimal requestLocationLong,
        Long       estimatedStartTimestamp,
        Long       estimatedCompletionTimestamp,
        BigDecimal estimatedAmount,
        BigDecimal estimatedDistance,
        Integer    noOfPassengers,
        Byte       isActive,
        Long       createdTimestamp,
        Long       lastUpdatedTimestamp,
        UInteger   createdBy,
        UInteger   lastUpdatedBy,
        String     paymentMode,
        String     platform,
        String     rideType,
        UInteger   serviceRegionId,
        UInteger   paymentOrderId,
        String     cancellationReason,
        String     pickupDropDirection,
        String     flightNo,
        String     pickDropPathId,
        Long       eligibleTimestamp,
        UInteger   ridecellTripId,
        String     packageCode,
        Integer    pricingDetailsId,
        Long       confirmationTimestamp,
        UInteger   ticketId,
        Long       cancellationTimestamp,
        String     promoCode,
        String     source,
        String     rideCategory,
        String     otherFlags,
        String     additionalPromo,
        String     requestType,
        Integer    bookedFor,
        Integer    bookedBy,
        Integer    priceMapId
    ) {
        this.id = id;
        this.riderId = riderId;
        this.riderType = riderType;
        this.requestState = requestState;
        this.pickUpLocation = pickUpLocation;
        this.dropLocation = dropLocation;
        this.verificationTokenId = verificationTokenId;
        this.requestLocation = requestLocation;
        this.pickUpLocationLat = pickUpLocationLat;
        this.dropLocationLat = dropLocationLat;
        this.requestLocationLat = requestLocationLat;
        this.pickUpLocationLong = pickUpLocationLong;
        this.dropLocationLong = dropLocationLong;
        this.requestLocationLong = requestLocationLong;
        this.estimatedStartTimestamp = estimatedStartTimestamp;
        this.estimatedCompletionTimestamp = estimatedCompletionTimestamp;
        this.estimatedAmount = estimatedAmount;
        this.estimatedDistance = estimatedDistance;
        this.noOfPassengers = noOfPassengers;
        this.isActive = isActive;
        this.createdTimestamp = createdTimestamp;
        this.lastUpdatedTimestamp = lastUpdatedTimestamp;
        this.createdBy = createdBy;
        this.lastUpdatedBy = lastUpdatedBy;
        this.paymentMode = paymentMode;
        this.platform = platform;
        this.rideType = rideType;
        this.serviceRegionId = serviceRegionId;
        this.paymentOrderId = paymentOrderId;
        this.cancellationReason = cancellationReason;
        this.pickupDropDirection = pickupDropDirection;
        this.flightNo = flightNo;
        this.pickDropPathId = pickDropPathId;
        this.eligibleTimestamp = eligibleTimestamp;
        this.ridecellTripId = ridecellTripId;
        this.packageCode = packageCode;
        this.pricingDetailsId = pricingDetailsId;
        this.confirmationTimestamp = confirmationTimestamp;
        this.ticketId = ticketId;
        this.cancellationTimestamp = cancellationTimestamp;
        this.promoCode = promoCode;
        this.source = source;
        this.rideCategory = rideCategory;
        this.otherFlags = otherFlags;
        this.additionalPromo = additionalPromo;
        this.requestType = requestType;
        this.bookedFor = bookedFor;
        this.bookedBy = bookedBy;
        this.priceMapId = priceMapId;
    }

    public UInteger getId() {
        return this.id;
    }

    public RideRequests setId(UInteger id) {
        this.id = id;
        return this;
    }

    public UInteger getRiderId() {
        return this.riderId;
    }

    public RideRequests setRiderId(UInteger riderId) {
        this.riderId = riderId;
        return this;
    }

    public String getRiderType() {
        return this.riderType;
    }

    public RideRequests setRiderType(String riderType) {
        this.riderType = riderType;
        return this;
    }

    public String getRequestState() {
        return this.requestState;
    }

    public RideRequests setRequestState(String requestState) {
        this.requestState = requestState;
        return this;
    }

    public String getPickUpLocation() {
        return this.pickUpLocation;
    }

    public RideRequests setPickUpLocation(String pickUpLocation) {
        this.pickUpLocation = pickUpLocation;
        return this;
    }

    public String getDropLocation() {
        return this.dropLocation;
    }

    public RideRequests setDropLocation(String dropLocation) {
        this.dropLocation = dropLocation;
        return this;
    }

    public UInteger getVerificationTokenId() {
        return this.verificationTokenId;
    }

    public RideRequests setVerificationTokenId(UInteger verificationTokenId) {
        this.verificationTokenId = verificationTokenId;
        return this;
    }

    public String getRequestLocation() {
        return this.requestLocation;
    }

    public RideRequests setRequestLocation(String requestLocation) {
        this.requestLocation = requestLocation;
        return this;
    }

    public BigDecimal getPickUpLocationLat() {
        return this.pickUpLocationLat;
    }

    public RideRequests setPickUpLocationLat(BigDecimal pickUpLocationLat) {
        this.pickUpLocationLat = pickUpLocationLat;
        return this;
    }

    public BigDecimal getDropLocationLat() {
        return this.dropLocationLat;
    }

    public RideRequests setDropLocationLat(BigDecimal dropLocationLat) {
        this.dropLocationLat = dropLocationLat;
        return this;
    }

    public BigDecimal getRequestLocationLat() {
        return this.requestLocationLat;
    }

    public RideRequests setRequestLocationLat(BigDecimal requestLocationLat) {
        this.requestLocationLat = requestLocationLat;
        return this;
    }

    public BigDecimal getPickUpLocationLong() {
        return this.pickUpLocationLong;
    }

    public RideRequests setPickUpLocationLong(BigDecimal pickUpLocationLong) {
        this.pickUpLocationLong = pickUpLocationLong;
        return this;
    }

    public BigDecimal getDropLocationLong() {
        return this.dropLocationLong;
    }

    public RideRequests setDropLocationLong(BigDecimal dropLocationLong) {
        this.dropLocationLong = dropLocationLong;
        return this;
    }

    public BigDecimal getRequestLocationLong() {
        return this.requestLocationLong;
    }

    public RideRequests setRequestLocationLong(BigDecimal requestLocationLong) {
        this.requestLocationLong = requestLocationLong;
        return this;
    }

    public Long getEstimatedStartTimestamp() {
        return this.estimatedStartTimestamp;
    }

    public RideRequests setEstimatedStartTimestamp(Long estimatedStartTimestamp) {
        this.estimatedStartTimestamp = estimatedStartTimestamp;
        return this;
    }

    public Long getEstimatedCompletionTimestamp() {
        return this.estimatedCompletionTimestamp;
    }

    public RideRequests setEstimatedCompletionTimestamp(Long estimatedCompletionTimestamp) {
        this.estimatedCompletionTimestamp = estimatedCompletionTimestamp;
        return this;
    }

    public BigDecimal getEstimatedAmount() {
        return this.estimatedAmount;
    }

    public RideRequests setEstimatedAmount(BigDecimal estimatedAmount) {
        this.estimatedAmount = estimatedAmount;
        return this;
    }

    public BigDecimal getEstimatedDistance() {
        return this.estimatedDistance;
    }

    public RideRequests setEstimatedDistance(BigDecimal estimatedDistance) {
        this.estimatedDistance = estimatedDistance;
        return this;
    }

    public Integer getNoOfPassengers() {
        return this.noOfPassengers;
    }

    public RideRequests setNoOfPassengers(Integer noOfPassengers) {
        this.noOfPassengers = noOfPassengers;
        return this;
    }

    public Byte getIsActive() {
        return this.isActive;
    }

    public RideRequests setIsActive(Byte isActive) {
        this.isActive = isActive;
        return this;
    }

    public Long getCreatedTimestamp() {
        return this.createdTimestamp;
    }

    public RideRequests setCreatedTimestamp(Long createdTimestamp) {
        this.createdTimestamp = createdTimestamp;
        return this;
    }

    public Long getLastUpdatedTimestamp() {
        return this.lastUpdatedTimestamp;
    }

    public RideRequests setLastUpdatedTimestamp(Long lastUpdatedTimestamp) {
        this.lastUpdatedTimestamp = lastUpdatedTimestamp;
        return this;
    }

    public UInteger getCreatedBy() {
        return this.createdBy;
    }

    public RideRequests setCreatedBy(UInteger createdBy) {
        this.createdBy = createdBy;
        return this;
    }

    public UInteger getLastUpdatedBy() {
        return this.lastUpdatedBy;
    }

    public RideRequests setLastUpdatedBy(UInteger lastUpdatedBy) {
        this.lastUpdatedBy = lastUpdatedBy;
        return this;
    }

    public String getPaymentMode() {
        return this.paymentMode;
    }

    public RideRequests setPaymentMode(String paymentMode) {
        this.paymentMode = paymentMode;
        return this;
    }

    public String getPlatform() {
        return this.platform;
    }

    public RideRequests setPlatform(String platform) {
        this.platform = platform;
        return this;
    }

    public String getRideType() {
        return this.rideType;
    }

    public RideRequests setRideType(String rideType) {
        this.rideType = rideType;
        return this;
    }

    public UInteger getServiceRegionId() {
        return this.serviceRegionId;
    }

    public RideRequests setServiceRegionId(UInteger serviceRegionId) {
        this.serviceRegionId = serviceRegionId;
        return this;
    }

    public UInteger getPaymentOrderId() {
        return this.paymentOrderId;
    }

    public RideRequests setPaymentOrderId(UInteger paymentOrderId) {
        this.paymentOrderId = paymentOrderId;
        return this;
    }

    public String getCancellationReason() {
        return this.cancellationReason;
    }

    public RideRequests setCancellationReason(String cancellationReason) {
        this.cancellationReason = cancellationReason;
        return this;
    }

    public String getPickupDropDirection() {
        return this.pickupDropDirection;
    }

    public RideRequests setPickupDropDirection(String pickupDropDirection) {
        this.pickupDropDirection = pickupDropDirection;
        return this;
    }

    public String getFlightNo() {
        return this.flightNo;
    }

    public RideRequests setFlightNo(String flightNo) {
        this.flightNo = flightNo;
        return this;
    }

    public String getPickDropPathId() {
        return this.pickDropPathId;
    }

    public RideRequests setPickDropPathId(String pickDropPathId) {
        this.pickDropPathId = pickDropPathId;
        return this;
    }

    public Long getEligibleTimestamp() {
        return this.eligibleTimestamp;
    }

    public RideRequests setEligibleTimestamp(Long eligibleTimestamp) {
        this.eligibleTimestamp = eligibleTimestamp;
        return this;
    }

    public UInteger getRidecellTripId() {
        return this.ridecellTripId;
    }

    public RideRequests setRidecellTripId(UInteger ridecellTripId) {
        this.ridecellTripId = ridecellTripId;
        return this;
    }

    public String getPackageCode() {
        return this.packageCode;
    }

    public RideRequests setPackageCode(String packageCode) {
        this.packageCode = packageCode;
        return this;
    }

    public Integer getPricingDetailsId() {
        return this.pricingDetailsId;
    }

    public RideRequests setPricingDetailsId(Integer pricingDetailsId) {
        this.pricingDetailsId = pricingDetailsId;
        return this;
    }

    public Long getConfirmationTimestamp() {
        return this.confirmationTimestamp;
    }

    public RideRequests setConfirmationTimestamp(Long confirmationTimestamp) {
        this.confirmationTimestamp = confirmationTimestamp;
        return this;
    }

    public UInteger getTicketId() {
        return this.ticketId;
    }

    public RideRequests setTicketId(UInteger ticketId) {
        this.ticketId = ticketId;
        return this;
    }

    public Long getCancellationTimestamp() {
        return this.cancellationTimestamp;
    }

    public RideRequests setCancellationTimestamp(Long cancellationTimestamp) {
        this.cancellationTimestamp = cancellationTimestamp;
        return this;
    }

    public String getPromoCode() {
        return this.promoCode;
    }

    public RideRequests setPromoCode(String promoCode) {
        this.promoCode = promoCode;
        return this;
    }

    public String getSource() {
        return this.source;
    }

    public RideRequests setSource(String source) {
        this.source = source;
        return this;
    }

    public String getRideCategory() {
        return this.rideCategory;
    }

    public RideRequests setRideCategory(String rideCategory) {
        this.rideCategory = rideCategory;
        return this;
    }

    public String getOtherFlags() {
        return this.otherFlags;
    }

    public RideRequests setOtherFlags(String otherFlags) {
        this.otherFlags = otherFlags;
        return this;
    }

    public String getAdditionalPromo() {
        return this.additionalPromo;
    }

    public RideRequests setAdditionalPromo(String additionalPromo) {
        this.additionalPromo = additionalPromo;
        return this;
    }

    public String getRequestType() {
        return this.requestType;
    }

    public RideRequests setRequestType(String requestType) {
        this.requestType = requestType;
        return this;
    }

    public Integer getBookedFor() {
        return this.bookedFor;
    }

    public RideRequests setBookedFor(Integer bookedFor) {
        this.bookedFor = bookedFor;
        return this;
    }

    public Integer getBookedBy() {
        return this.bookedBy;
    }

    public RideRequests setBookedBy(Integer bookedBy) {
        this.bookedBy = bookedBy;
        return this;
    }

    public Integer getPriceMapId() {
        return this.priceMapId;
    }

    public RideRequests setPriceMapId(Integer priceMapId) {
        this.priceMapId = priceMapId;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final RideRequests other = (RideRequests) obj;
        if (id == null) {
            if (other.id != null)
                return false;
        }
        else if (!id.equals(other.id))
            return false;
        if (riderId == null) {
            if (other.riderId != null)
                return false;
        }
        else if (!riderId.equals(other.riderId))
            return false;
        if (riderType == null) {
            if (other.riderType != null)
                return false;
        }
        else if (!riderType.equals(other.riderType))
            return false;
        if (requestState == null) {
            if (other.requestState != null)
                return false;
        }
        else if (!requestState.equals(other.requestState))
            return false;
        if (pickUpLocation == null) {
            if (other.pickUpLocation != null)
                return false;
        }
        else if (!pickUpLocation.equals(other.pickUpLocation))
            return false;
        if (dropLocation == null) {
            if (other.dropLocation != null)
                return false;
        }
        else if (!dropLocation.equals(other.dropLocation))
            return false;
        if (verificationTokenId == null) {
            if (other.verificationTokenId != null)
                return false;
        }
        else if (!verificationTokenId.equals(other.verificationTokenId))
            return false;
        if (requestLocation == null) {
            if (other.requestLocation != null)
                return false;
        }
        else if (!requestLocation.equals(other.requestLocation))
            return false;
        if (pickUpLocationLat == null) {
            if (other.pickUpLocationLat != null)
                return false;
        }
        else if (!pickUpLocationLat.equals(other.pickUpLocationLat))
            return false;
        if (dropLocationLat == null) {
            if (other.dropLocationLat != null)
                return false;
        }
        else if (!dropLocationLat.equals(other.dropLocationLat))
            return false;
        if (requestLocationLat == null) {
            if (other.requestLocationLat != null)
                return false;
        }
        else if (!requestLocationLat.equals(other.requestLocationLat))
            return false;
        if (pickUpLocationLong == null) {
            if (other.pickUpLocationLong != null)
                return false;
        }
        else if (!pickUpLocationLong.equals(other.pickUpLocationLong))
            return false;
        if (dropLocationLong == null) {
            if (other.dropLocationLong != null)
                return false;
        }
        else if (!dropLocationLong.equals(other.dropLocationLong))
            return false;
        if (requestLocationLong == null) {
            if (other.requestLocationLong != null)
                return false;
        }
        else if (!requestLocationLong.equals(other.requestLocationLong))
            return false;
        if (estimatedStartTimestamp == null) {
            if (other.estimatedStartTimestamp != null)
                return false;
        }
        else if (!estimatedStartTimestamp.equals(other.estimatedStartTimestamp))
            return false;
        if (estimatedCompletionTimestamp == null) {
            if (other.estimatedCompletionTimestamp != null)
                return false;
        }
        else if (!estimatedCompletionTimestamp.equals(other.estimatedCompletionTimestamp))
            return false;
        if (estimatedAmount == null) {
            if (other.estimatedAmount != null)
                return false;
        }
        else if (!estimatedAmount.equals(other.estimatedAmount))
            return false;
        if (estimatedDistance == null) {
            if (other.estimatedDistance != null)
                return false;
        }
        else if (!estimatedDistance.equals(other.estimatedDistance))
            return false;
        if (noOfPassengers == null) {
            if (other.noOfPassengers != null)
                return false;
        }
        else if (!noOfPassengers.equals(other.noOfPassengers))
            return false;
        if (isActive == null) {
            if (other.isActive != null)
                return false;
        }
        else if (!isActive.equals(other.isActive))
            return false;
        if (createdTimestamp == null) {
            if (other.createdTimestamp != null)
                return false;
        }
        else if (!createdTimestamp.equals(other.createdTimestamp))
            return false;
        if (lastUpdatedTimestamp == null) {
            if (other.lastUpdatedTimestamp != null)
                return false;
        }
        else if (!lastUpdatedTimestamp.equals(other.lastUpdatedTimestamp))
            return false;
        if (createdBy == null) {
            if (other.createdBy != null)
                return false;
        }
        else if (!createdBy.equals(other.createdBy))
            return false;
        if (lastUpdatedBy == null) {
            if (other.lastUpdatedBy != null)
                return false;
        }
        else if (!lastUpdatedBy.equals(other.lastUpdatedBy))
            return false;
        if (paymentMode == null) {
            if (other.paymentMode != null)
                return false;
        }
        else if (!paymentMode.equals(other.paymentMode))
            return false;
        if (platform == null) {
            if (other.platform != null)
                return false;
        }
        else if (!platform.equals(other.platform))
            return false;
        if (rideType == null) {
            if (other.rideType != null)
                return false;
        }
        else if (!rideType.equals(other.rideType))
            return false;
        if (serviceRegionId == null) {
            if (other.serviceRegionId != null)
                return false;
        }
        else if (!serviceRegionId.equals(other.serviceRegionId))
            return false;
        if (paymentOrderId == null) {
            if (other.paymentOrderId != null)
                return false;
        }
        else if (!paymentOrderId.equals(other.paymentOrderId))
            return false;
        if (cancellationReason == null) {
            if (other.cancellationReason != null)
                return false;
        }
        else if (!cancellationReason.equals(other.cancellationReason))
            return false;
        if (pickupDropDirection == null) {
            if (other.pickupDropDirection != null)
                return false;
        }
        else if (!pickupDropDirection.equals(other.pickupDropDirection))
            return false;
        if (flightNo == null) {
            if (other.flightNo != null)
                return false;
        }
        else if (!flightNo.equals(other.flightNo))
            return false;
        if (pickDropPathId == null) {
            if (other.pickDropPathId != null)
                return false;
        }
        else if (!pickDropPathId.equals(other.pickDropPathId))
            return false;
        if (eligibleTimestamp == null) {
            if (other.eligibleTimestamp != null)
                return false;
        }
        else if (!eligibleTimestamp.equals(other.eligibleTimestamp))
            return false;
        if (ridecellTripId == null) {
            if (other.ridecellTripId != null)
                return false;
        }
        else if (!ridecellTripId.equals(other.ridecellTripId))
            return false;
        if (packageCode == null) {
            if (other.packageCode != null)
                return false;
        }
        else if (!packageCode.equals(other.packageCode))
            return false;
        if (pricingDetailsId == null) {
            if (other.pricingDetailsId != null)
                return false;
        }
        else if (!pricingDetailsId.equals(other.pricingDetailsId))
            return false;
        if (confirmationTimestamp == null) {
            if (other.confirmationTimestamp != null)
                return false;
        }
        else if (!confirmationTimestamp.equals(other.confirmationTimestamp))
            return false;
        if (ticketId == null) {
            if (other.ticketId != null)
                return false;
        }
        else if (!ticketId.equals(other.ticketId))
            return false;
        if (cancellationTimestamp == null) {
            if (other.cancellationTimestamp != null)
                return false;
        }
        else if (!cancellationTimestamp.equals(other.cancellationTimestamp))
            return false;
        if (promoCode == null) {
            if (other.promoCode != null)
                return false;
        }
        else if (!promoCode.equals(other.promoCode))
            return false;
        if (source == null) {
            if (other.source != null)
                return false;
        }
        else if (!source.equals(other.source))
            return false;
        if (rideCategory == null) {
            if (other.rideCategory != null)
                return false;
        }
        else if (!rideCategory.equals(other.rideCategory))
            return false;
        if (otherFlags == null) {
            if (other.otherFlags != null)
                return false;
        }
        else if (!otherFlags.equals(other.otherFlags))
            return false;
        if (additionalPromo == null) {
            if (other.additionalPromo != null)
                return false;
        }
        else if (!additionalPromo.equals(other.additionalPromo))
            return false;
        if (requestType == null) {
            if (other.requestType != null)
                return false;
        }
        else if (!requestType.equals(other.requestType))
            return false;
        if (bookedFor == null) {
            if (other.bookedFor != null)
                return false;
        }
        else if (!bookedFor.equals(other.bookedFor))
            return false;
        if (bookedBy == null) {
            if (other.bookedBy != null)
                return false;
        }
        else if (!bookedBy.equals(other.bookedBy))
            return false;
        if (priceMapId == null) {
            if (other.priceMapId != null)
                return false;
        }
        else if (!priceMapId.equals(other.priceMapId))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.riderId == null) ? 0 : this.riderId.hashCode());
        result = prime * result + ((this.riderType == null) ? 0 : this.riderType.hashCode());
        result = prime * result + ((this.requestState == null) ? 0 : this.requestState.hashCode());
        result = prime * result + ((this.pickUpLocation == null) ? 0 : this.pickUpLocation.hashCode());
        result = prime * result + ((this.dropLocation == null) ? 0 : this.dropLocation.hashCode());
        result = prime * result + ((this.verificationTokenId == null) ? 0 : this.verificationTokenId.hashCode());
        result = prime * result + ((this.requestLocation == null) ? 0 : this.requestLocation.hashCode());
        result = prime * result + ((this.pickUpLocationLat == null) ? 0 : this.pickUpLocationLat.hashCode());
        result = prime * result + ((this.dropLocationLat == null) ? 0 : this.dropLocationLat.hashCode());
        result = prime * result + ((this.requestLocationLat == null) ? 0 : this.requestLocationLat.hashCode());
        result = prime * result + ((this.pickUpLocationLong == null) ? 0 : this.pickUpLocationLong.hashCode());
        result = prime * result + ((this.dropLocationLong == null) ? 0 : this.dropLocationLong.hashCode());
        result = prime * result + ((this.requestLocationLong == null) ? 0 : this.requestLocationLong.hashCode());
        result = prime * result + ((this.estimatedStartTimestamp == null) ? 0 : this.estimatedStartTimestamp.hashCode());
        result = prime * result + ((this.estimatedCompletionTimestamp == null) ? 0 : this.estimatedCompletionTimestamp.hashCode());
        result = prime * result + ((this.estimatedAmount == null) ? 0 : this.estimatedAmount.hashCode());
        result = prime * result + ((this.estimatedDistance == null) ? 0 : this.estimatedDistance.hashCode());
        result = prime * result + ((this.noOfPassengers == null) ? 0 : this.noOfPassengers.hashCode());
        result = prime * result + ((this.isActive == null) ? 0 : this.isActive.hashCode());
        result = prime * result + ((this.createdTimestamp == null) ? 0 : this.createdTimestamp.hashCode());
        result = prime * result + ((this.lastUpdatedTimestamp == null) ? 0 : this.lastUpdatedTimestamp.hashCode());
        result = prime * result + ((this.createdBy == null) ? 0 : this.createdBy.hashCode());
        result = prime * result + ((this.lastUpdatedBy == null) ? 0 : this.lastUpdatedBy.hashCode());
        result = prime * result + ((this.paymentMode == null) ? 0 : this.paymentMode.hashCode());
        result = prime * result + ((this.platform == null) ? 0 : this.platform.hashCode());
        result = prime * result + ((this.rideType == null) ? 0 : this.rideType.hashCode());
        result = prime * result + ((this.serviceRegionId == null) ? 0 : this.serviceRegionId.hashCode());
        result = prime * result + ((this.paymentOrderId == null) ? 0 : this.paymentOrderId.hashCode());
        result = prime * result + ((this.cancellationReason == null) ? 0 : this.cancellationReason.hashCode());
        result = prime * result + ((this.pickupDropDirection == null) ? 0 : this.pickupDropDirection.hashCode());
        result = prime * result + ((this.flightNo == null) ? 0 : this.flightNo.hashCode());
        result = prime * result + ((this.pickDropPathId == null) ? 0 : this.pickDropPathId.hashCode());
        result = prime * result + ((this.eligibleTimestamp == null) ? 0 : this.eligibleTimestamp.hashCode());
        result = prime * result + ((this.ridecellTripId == null) ? 0 : this.ridecellTripId.hashCode());
        result = prime * result + ((this.packageCode == null) ? 0 : this.packageCode.hashCode());
        result = prime * result + ((this.pricingDetailsId == null) ? 0 : this.pricingDetailsId.hashCode());
        result = prime * result + ((this.confirmationTimestamp == null) ? 0 : this.confirmationTimestamp.hashCode());
        result = prime * result + ((this.ticketId == null) ? 0 : this.ticketId.hashCode());
        result = prime * result + ((this.cancellationTimestamp == null) ? 0 : this.cancellationTimestamp.hashCode());
        result = prime * result + ((this.promoCode == null) ? 0 : this.promoCode.hashCode());
        result = prime * result + ((this.source == null) ? 0 : this.source.hashCode());
        result = prime * result + ((this.rideCategory == null) ? 0 : this.rideCategory.hashCode());
        result = prime * result + ((this.otherFlags == null) ? 0 : this.otherFlags.hashCode());
        result = prime * result + ((this.additionalPromo == null) ? 0 : this.additionalPromo.hashCode());
        result = prime * result + ((this.requestType == null) ? 0 : this.requestType.hashCode());
        result = prime * result + ((this.bookedFor == null) ? 0 : this.bookedFor.hashCode());
        result = prime * result + ((this.bookedBy == null) ? 0 : this.bookedBy.hashCode());
        result = prime * result + ((this.priceMapId == null) ? 0 : this.priceMapId.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("RideRequests (");

        sb.append(id);
        sb.append(", ").append(riderId);
        sb.append(", ").append(riderType);
        sb.append(", ").append(requestState);
        sb.append(", ").append(pickUpLocation);
        sb.append(", ").append(dropLocation);
        sb.append(", ").append(verificationTokenId);
        sb.append(", ").append(requestLocation);
        sb.append(", ").append(pickUpLocationLat);
        sb.append(", ").append(dropLocationLat);
        sb.append(", ").append(requestLocationLat);
        sb.append(", ").append(pickUpLocationLong);
        sb.append(", ").append(dropLocationLong);
        sb.append(", ").append(requestLocationLong);
        sb.append(", ").append(estimatedStartTimestamp);
        sb.append(", ").append(estimatedCompletionTimestamp);
        sb.append(", ").append(estimatedAmount);
        sb.append(", ").append(estimatedDistance);
        sb.append(", ").append(noOfPassengers);
        sb.append(", ").append(isActive);
        sb.append(", ").append(createdTimestamp);
        sb.append(", ").append(lastUpdatedTimestamp);
        sb.append(", ").append(createdBy);
        sb.append(", ").append(lastUpdatedBy);
        sb.append(", ").append(paymentMode);
        sb.append(", ").append(platform);
        sb.append(", ").append(rideType);
        sb.append(", ").append(serviceRegionId);
        sb.append(", ").append(paymentOrderId);
        sb.append(", ").append(cancellationReason);
        sb.append(", ").append(pickupDropDirection);
        sb.append(", ").append(flightNo);
        sb.append(", ").append(pickDropPathId);
        sb.append(", ").append(eligibleTimestamp);
        sb.append(", ").append(ridecellTripId);
        sb.append(", ").append(packageCode);
        sb.append(", ").append(pricingDetailsId);
        sb.append(", ").append(confirmationTimestamp);
        sb.append(", ").append(ticketId);
        sb.append(", ").append(cancellationTimestamp);
        sb.append(", ").append(promoCode);
        sb.append(", ").append(source);
        sb.append(", ").append(rideCategory);
        sb.append(", ").append(otherFlags);
        sb.append(", ").append(additionalPromo);
        sb.append(", ").append(requestType);
        sb.append(", ").append(bookedFor);
        sb.append(", ").append(bookedBy);
        sb.append(", ").append(priceMapId);

        sb.append(")");
        return sb.toString();
    }
}
