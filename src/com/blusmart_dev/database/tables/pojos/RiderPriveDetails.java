/*
 * This file is generated by jOOQ.
 */
package com.blusmart_dev.database.tables.pojos;


import java.io.Serializable;

import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RiderPriveDetails implements Serializable {

    private static final long serialVersionUID = -908560409;

    private UInteger id;
    private UInteger riderId;
    private String   priveKey;
    private Long     eligibleStartDate;
    private Long     eligibleEndDate;
    private UInteger totalPoints;
    private Byte     isMembershipActive;
    private Byte     isActive;
    private Long     membershipActiveTimestamp;
    private Byte     isPrevMonthPointsAdded;
    private UInteger pointToShow;
    private UInteger requiredPoints;
    private UInteger totalCumulativePoint;
    private UInteger versionId;
    private Long     createdTimestamp;
    private Long     lastUpdatedTimestamp;
    private String   priveOtherFlags;

    public RiderPriveDetails() {}

    public RiderPriveDetails(RiderPriveDetails value) {
        this.id = value.id;
        this.riderId = value.riderId;
        this.priveKey = value.priveKey;
        this.eligibleStartDate = value.eligibleStartDate;
        this.eligibleEndDate = value.eligibleEndDate;
        this.totalPoints = value.totalPoints;
        this.isMembershipActive = value.isMembershipActive;
        this.isActive = value.isActive;
        this.membershipActiveTimestamp = value.membershipActiveTimestamp;
        this.isPrevMonthPointsAdded = value.isPrevMonthPointsAdded;
        this.pointToShow = value.pointToShow;
        this.requiredPoints = value.requiredPoints;
        this.totalCumulativePoint = value.totalCumulativePoint;
        this.versionId = value.versionId;
        this.createdTimestamp = value.createdTimestamp;
        this.lastUpdatedTimestamp = value.lastUpdatedTimestamp;
        this.priveOtherFlags = value.priveOtherFlags;
    }

    public RiderPriveDetails(
        UInteger id,
        UInteger riderId,
        String   priveKey,
        Long     eligibleStartDate,
        Long     eligibleEndDate,
        UInteger totalPoints,
        Byte     isMembershipActive,
        Byte     isActive,
        Long     membershipActiveTimestamp,
        Byte     isPrevMonthPointsAdded,
        UInteger pointToShow,
        UInteger requiredPoints,
        UInteger totalCumulativePoint,
        UInteger versionId,
        Long     createdTimestamp,
        Long     lastUpdatedTimestamp,
        String   priveOtherFlags
    ) {
        this.id = id;
        this.riderId = riderId;
        this.priveKey = priveKey;
        this.eligibleStartDate = eligibleStartDate;
        this.eligibleEndDate = eligibleEndDate;
        this.totalPoints = totalPoints;
        this.isMembershipActive = isMembershipActive;
        this.isActive = isActive;
        this.membershipActiveTimestamp = membershipActiveTimestamp;
        this.isPrevMonthPointsAdded = isPrevMonthPointsAdded;
        this.pointToShow = pointToShow;
        this.requiredPoints = requiredPoints;
        this.totalCumulativePoint = totalCumulativePoint;
        this.versionId = versionId;
        this.createdTimestamp = createdTimestamp;
        this.lastUpdatedTimestamp = lastUpdatedTimestamp;
        this.priveOtherFlags = priveOtherFlags;
    }

    public UInteger getId() {
        return this.id;
    }

    public RiderPriveDetails setId(UInteger id) {
        this.id = id;
        return this;
    }

    public UInteger getRiderId() {
        return this.riderId;
    }

    public RiderPriveDetails setRiderId(UInteger riderId) {
        this.riderId = riderId;
        return this;
    }

    public String getPriveKey() {
        return this.priveKey;
    }

    public RiderPriveDetails setPriveKey(String priveKey) {
        this.priveKey = priveKey;
        return this;
    }

    public Long getEligibleStartDate() {
        return this.eligibleStartDate;
    }

    public RiderPriveDetails setEligibleStartDate(Long eligibleStartDate) {
        this.eligibleStartDate = eligibleStartDate;
        return this;
    }

    public Long getEligibleEndDate() {
        return this.eligibleEndDate;
    }

    public RiderPriveDetails setEligibleEndDate(Long eligibleEndDate) {
        this.eligibleEndDate = eligibleEndDate;
        return this;
    }

    public UInteger getTotalPoints() {
        return this.totalPoints;
    }

    public RiderPriveDetails setTotalPoints(UInteger totalPoints) {
        this.totalPoints = totalPoints;
        return this;
    }

    public Byte getIsMembershipActive() {
        return this.isMembershipActive;
    }

    public RiderPriveDetails setIsMembershipActive(Byte isMembershipActive) {
        this.isMembershipActive = isMembershipActive;
        return this;
    }

    public Byte getIsActive() {
        return this.isActive;
    }

    public RiderPriveDetails setIsActive(Byte isActive) {
        this.isActive = isActive;
        return this;
    }

    public Long getMembershipActiveTimestamp() {
        return this.membershipActiveTimestamp;
    }

    public RiderPriveDetails setMembershipActiveTimestamp(Long membershipActiveTimestamp) {
        this.membershipActiveTimestamp = membershipActiveTimestamp;
        return this;
    }

    public Byte getIsPrevMonthPointsAdded() {
        return this.isPrevMonthPointsAdded;
    }

    public RiderPriveDetails setIsPrevMonthPointsAdded(Byte isPrevMonthPointsAdded) {
        this.isPrevMonthPointsAdded = isPrevMonthPointsAdded;
        return this;
    }

    public UInteger getPointToShow() {
        return this.pointToShow;
    }

    public RiderPriveDetails setPointToShow(UInteger pointToShow) {
        this.pointToShow = pointToShow;
        return this;
    }

    public UInteger getRequiredPoints() {
        return this.requiredPoints;
    }

    public RiderPriveDetails setRequiredPoints(UInteger requiredPoints) {
        this.requiredPoints = requiredPoints;
        return this;
    }

    public UInteger getTotalCumulativePoint() {
        return this.totalCumulativePoint;
    }

    public RiderPriveDetails setTotalCumulativePoint(UInteger totalCumulativePoint) {
        this.totalCumulativePoint = totalCumulativePoint;
        return this;
    }

    public UInteger getVersionId() {
        return this.versionId;
    }

    public RiderPriveDetails setVersionId(UInteger versionId) {
        this.versionId = versionId;
        return this;
    }

    public Long getCreatedTimestamp() {
        return this.createdTimestamp;
    }

    public RiderPriveDetails setCreatedTimestamp(Long createdTimestamp) {
        this.createdTimestamp = createdTimestamp;
        return this;
    }

    public Long getLastUpdatedTimestamp() {
        return this.lastUpdatedTimestamp;
    }

    public RiderPriveDetails setLastUpdatedTimestamp(Long lastUpdatedTimestamp) {
        this.lastUpdatedTimestamp = lastUpdatedTimestamp;
        return this;
    }

    public String getPriveOtherFlags() {
        return this.priveOtherFlags;
    }

    public RiderPriveDetails setPriveOtherFlags(String priveOtherFlags) {
        this.priveOtherFlags = priveOtherFlags;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final RiderPriveDetails other = (RiderPriveDetails) obj;
        if (id == null) {
            if (other.id != null)
                return false;
        }
        else if (!id.equals(other.id))
            return false;
        if (riderId == null) {
            if (other.riderId != null)
                return false;
        }
        else if (!riderId.equals(other.riderId))
            return false;
        if (priveKey == null) {
            if (other.priveKey != null)
                return false;
        }
        else if (!priveKey.equals(other.priveKey))
            return false;
        if (eligibleStartDate == null) {
            if (other.eligibleStartDate != null)
                return false;
        }
        else if (!eligibleStartDate.equals(other.eligibleStartDate))
            return false;
        if (eligibleEndDate == null) {
            if (other.eligibleEndDate != null)
                return false;
        }
        else if (!eligibleEndDate.equals(other.eligibleEndDate))
            return false;
        if (totalPoints == null) {
            if (other.totalPoints != null)
                return false;
        }
        else if (!totalPoints.equals(other.totalPoints))
            return false;
        if (isMembershipActive == null) {
            if (other.isMembershipActive != null)
                return false;
        }
        else if (!isMembershipActive.equals(other.isMembershipActive))
            return false;
        if (isActive == null) {
            if (other.isActive != null)
                return false;
        }
        else if (!isActive.equals(other.isActive))
            return false;
        if (membershipActiveTimestamp == null) {
            if (other.membershipActiveTimestamp != null)
                return false;
        }
        else if (!membershipActiveTimestamp.equals(other.membershipActiveTimestamp))
            return false;
        if (isPrevMonthPointsAdded == null) {
            if (other.isPrevMonthPointsAdded != null)
                return false;
        }
        else if (!isPrevMonthPointsAdded.equals(other.isPrevMonthPointsAdded))
            return false;
        if (pointToShow == null) {
            if (other.pointToShow != null)
                return false;
        }
        else if (!pointToShow.equals(other.pointToShow))
            return false;
        if (requiredPoints == null) {
            if (other.requiredPoints != null)
                return false;
        }
        else if (!requiredPoints.equals(other.requiredPoints))
            return false;
        if (totalCumulativePoint == null) {
            if (other.totalCumulativePoint != null)
                return false;
        }
        else if (!totalCumulativePoint.equals(other.totalCumulativePoint))
            return false;
        if (versionId == null) {
            if (other.versionId != null)
                return false;
        }
        else if (!versionId.equals(other.versionId))
            return false;
        if (createdTimestamp == null) {
            if (other.createdTimestamp != null)
                return false;
        }
        else if (!createdTimestamp.equals(other.createdTimestamp))
            return false;
        if (lastUpdatedTimestamp == null) {
            if (other.lastUpdatedTimestamp != null)
                return false;
        }
        else if (!lastUpdatedTimestamp.equals(other.lastUpdatedTimestamp))
            return false;
        if (priveOtherFlags == null) {
            if (other.priveOtherFlags != null)
                return false;
        }
        else if (!priveOtherFlags.equals(other.priveOtherFlags))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.riderId == null) ? 0 : this.riderId.hashCode());
        result = prime * result + ((this.priveKey == null) ? 0 : this.priveKey.hashCode());
        result = prime * result + ((this.eligibleStartDate == null) ? 0 : this.eligibleStartDate.hashCode());
        result = prime * result + ((this.eligibleEndDate == null) ? 0 : this.eligibleEndDate.hashCode());
        result = prime * result + ((this.totalPoints == null) ? 0 : this.totalPoints.hashCode());
        result = prime * result + ((this.isMembershipActive == null) ? 0 : this.isMembershipActive.hashCode());
        result = prime * result + ((this.isActive == null) ? 0 : this.isActive.hashCode());
        result = prime * result + ((this.membershipActiveTimestamp == null) ? 0 : this.membershipActiveTimestamp.hashCode());
        result = prime * result + ((this.isPrevMonthPointsAdded == null) ? 0 : this.isPrevMonthPointsAdded.hashCode());
        result = prime * result + ((this.pointToShow == null) ? 0 : this.pointToShow.hashCode());
        result = prime * result + ((this.requiredPoints == null) ? 0 : this.requiredPoints.hashCode());
        result = prime * result + ((this.totalCumulativePoint == null) ? 0 : this.totalCumulativePoint.hashCode());
        result = prime * result + ((this.versionId == null) ? 0 : this.versionId.hashCode());
        result = prime * result + ((this.createdTimestamp == null) ? 0 : this.createdTimestamp.hashCode());
        result = prime * result + ((this.lastUpdatedTimestamp == null) ? 0 : this.lastUpdatedTimestamp.hashCode());
        result = prime * result + ((this.priveOtherFlags == null) ? 0 : this.priveOtherFlags.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("RiderPriveDetails (");

        sb.append(id);
        sb.append(", ").append(riderId);
        sb.append(", ").append(priveKey);
        sb.append(", ").append(eligibleStartDate);
        sb.append(", ").append(eligibleEndDate);
        sb.append(", ").append(totalPoints);
        sb.append(", ").append(isMembershipActive);
        sb.append(", ").append(isActive);
        sb.append(", ").append(membershipActiveTimestamp);
        sb.append(", ").append(isPrevMonthPointsAdded);
        sb.append(", ").append(pointToShow);
        sb.append(", ").append(requiredPoints);
        sb.append(", ").append(totalCumulativePoint);
        sb.append(", ").append(versionId);
        sb.append(", ").append(createdTimestamp);
        sb.append(", ").append(lastUpdatedTimestamp);
        sb.append(", ").append(priveOtherFlags);

        sb.append(")");
        return sb.toString();
    }
}
