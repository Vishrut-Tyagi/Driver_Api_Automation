/*
 * This file is generated by jOOQ.
 */
package com.blusmart_dev.database.tables.pojos;


import java.io.Serializable;
import java.math.BigDecimal;

import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RiderStats implements Serializable {

    private static final long serialVersionUID = -1527493484;

    private Integer    id;
    private Integer    riderId;
    private UInteger   totalTrips;
    private BigDecimal totalCarbonSaved;
    private BigDecimal totalKms;
    private BigDecimal totalHours;
    private String     topDestinationOne;
    private String     topDestinationTwo;
    private String     topDestinationThree;
    private BigDecimal longestTripKms;
    private BigDecimal averageRating;
    private String     longestRidePickup;
    private String     longestRideDrop;
    private Integer    longestRideStops;
    private String     category;
    private Long       createdTimestamp;
    private Long       lastUpdatedTimestamp;
    private UInteger   createdBy;
    private UInteger   lastUpdatedBy;
    private Long       validFromDate;
    private Long       validToDate;
    private String     firstTripPickup;
    private String     firstTripDrop;
    private String     topDriverOne;
    private BigDecimal topDriverOneRating;
    private String     topDriverTwo;
    private BigDecimal topDriverTwoRating;
    private String     topDriverThree;
    private BigDecimal topDriverThreeRating;
    private Byte       isActive;

    public RiderStats() {}

    public RiderStats(RiderStats value) {
        this.id = value.id;
        this.riderId = value.riderId;
        this.totalTrips = value.totalTrips;
        this.totalCarbonSaved = value.totalCarbonSaved;
        this.totalKms = value.totalKms;
        this.totalHours = value.totalHours;
        this.topDestinationOne = value.topDestinationOne;
        this.topDestinationTwo = value.topDestinationTwo;
        this.topDestinationThree = value.topDestinationThree;
        this.longestTripKms = value.longestTripKms;
        this.averageRating = value.averageRating;
        this.longestRidePickup = value.longestRidePickup;
        this.longestRideDrop = value.longestRideDrop;
        this.longestRideStops = value.longestRideStops;
        this.category = value.category;
        this.createdTimestamp = value.createdTimestamp;
        this.lastUpdatedTimestamp = value.lastUpdatedTimestamp;
        this.createdBy = value.createdBy;
        this.lastUpdatedBy = value.lastUpdatedBy;
        this.validFromDate = value.validFromDate;
        this.validToDate = value.validToDate;
        this.firstTripPickup = value.firstTripPickup;
        this.firstTripDrop = value.firstTripDrop;
        this.topDriverOne = value.topDriverOne;
        this.topDriverOneRating = value.topDriverOneRating;
        this.topDriverTwo = value.topDriverTwo;
        this.topDriverTwoRating = value.topDriverTwoRating;
        this.topDriverThree = value.topDriverThree;
        this.topDriverThreeRating = value.topDriverThreeRating;
        this.isActive = value.isActive;
    }

    public RiderStats(
        Integer    id,
        Integer    riderId,
        UInteger   totalTrips,
        BigDecimal totalCarbonSaved,
        BigDecimal totalKms,
        BigDecimal totalHours,
        String     topDestinationOne,
        String     topDestinationTwo,
        String     topDestinationThree,
        BigDecimal longestTripKms,
        BigDecimal averageRating,
        String     longestRidePickup,
        String     longestRideDrop,
        Integer    longestRideStops,
        String     category,
        Long       createdTimestamp,
        Long       lastUpdatedTimestamp,
        UInteger   createdBy,
        UInteger   lastUpdatedBy,
        Long       validFromDate,
        Long       validToDate,
        String     firstTripPickup,
        String     firstTripDrop,
        String     topDriverOne,
        BigDecimal topDriverOneRating,
        String     topDriverTwo,
        BigDecimal topDriverTwoRating,
        String     topDriverThree,
        BigDecimal topDriverThreeRating,
        Byte       isActive
    ) {
        this.id = id;
        this.riderId = riderId;
        this.totalTrips = totalTrips;
        this.totalCarbonSaved = totalCarbonSaved;
        this.totalKms = totalKms;
        this.totalHours = totalHours;
        this.topDestinationOne = topDestinationOne;
        this.topDestinationTwo = topDestinationTwo;
        this.topDestinationThree = topDestinationThree;
        this.longestTripKms = longestTripKms;
        this.averageRating = averageRating;
        this.longestRidePickup = longestRidePickup;
        this.longestRideDrop = longestRideDrop;
        this.longestRideStops = longestRideStops;
        this.category = category;
        this.createdTimestamp = createdTimestamp;
        this.lastUpdatedTimestamp = lastUpdatedTimestamp;
        this.createdBy = createdBy;
        this.lastUpdatedBy = lastUpdatedBy;
        this.validFromDate = validFromDate;
        this.validToDate = validToDate;
        this.firstTripPickup = firstTripPickup;
        this.firstTripDrop = firstTripDrop;
        this.topDriverOne = topDriverOne;
        this.topDriverOneRating = topDriverOneRating;
        this.topDriverTwo = topDriverTwo;
        this.topDriverTwoRating = topDriverTwoRating;
        this.topDriverThree = topDriverThree;
        this.topDriverThreeRating = topDriverThreeRating;
        this.isActive = isActive;
    }

    public Integer getId() {
        return this.id;
    }

    public RiderStats setId(Integer id) {
        this.id = id;
        return this;
    }

    public Integer getRiderId() {
        return this.riderId;
    }

    public RiderStats setRiderId(Integer riderId) {
        this.riderId = riderId;
        return this;
    }

    public UInteger getTotalTrips() {
        return this.totalTrips;
    }

    public RiderStats setTotalTrips(UInteger totalTrips) {
        this.totalTrips = totalTrips;
        return this;
    }

    public BigDecimal getTotalCarbonSaved() {
        return this.totalCarbonSaved;
    }

    public RiderStats setTotalCarbonSaved(BigDecimal totalCarbonSaved) {
        this.totalCarbonSaved = totalCarbonSaved;
        return this;
    }

    public BigDecimal getTotalKms() {
        return this.totalKms;
    }

    public RiderStats setTotalKms(BigDecimal totalKms) {
        this.totalKms = totalKms;
        return this;
    }

    public BigDecimal getTotalHours() {
        return this.totalHours;
    }

    public RiderStats setTotalHours(BigDecimal totalHours) {
        this.totalHours = totalHours;
        return this;
    }

    public String getTopDestinationOne() {
        return this.topDestinationOne;
    }

    public RiderStats setTopDestinationOne(String topDestinationOne) {
        this.topDestinationOne = topDestinationOne;
        return this;
    }

    public String getTopDestinationTwo() {
        return this.topDestinationTwo;
    }

    public RiderStats setTopDestinationTwo(String topDestinationTwo) {
        this.topDestinationTwo = topDestinationTwo;
        return this;
    }

    public String getTopDestinationThree() {
        return this.topDestinationThree;
    }

    public RiderStats setTopDestinationThree(String topDestinationThree) {
        this.topDestinationThree = topDestinationThree;
        return this;
    }

    public BigDecimal getLongestTripKms() {
        return this.longestTripKms;
    }

    public RiderStats setLongestTripKms(BigDecimal longestTripKms) {
        this.longestTripKms = longestTripKms;
        return this;
    }

    public BigDecimal getAverageRating() {
        return this.averageRating;
    }

    public RiderStats setAverageRating(BigDecimal averageRating) {
        this.averageRating = averageRating;
        return this;
    }

    public String getLongestRidePickup() {
        return this.longestRidePickup;
    }

    public RiderStats setLongestRidePickup(String longestRidePickup) {
        this.longestRidePickup = longestRidePickup;
        return this;
    }

    public String getLongestRideDrop() {
        return this.longestRideDrop;
    }

    public RiderStats setLongestRideDrop(String longestRideDrop) {
        this.longestRideDrop = longestRideDrop;
        return this;
    }

    public Integer getLongestRideStops() {
        return this.longestRideStops;
    }

    public RiderStats setLongestRideStops(Integer longestRideStops) {
        this.longestRideStops = longestRideStops;
        return this;
    }

    public String getCategory() {
        return this.category;
    }

    public RiderStats setCategory(String category) {
        this.category = category;
        return this;
    }

    public Long getCreatedTimestamp() {
        return this.createdTimestamp;
    }

    public RiderStats setCreatedTimestamp(Long createdTimestamp) {
        this.createdTimestamp = createdTimestamp;
        return this;
    }

    public Long getLastUpdatedTimestamp() {
        return this.lastUpdatedTimestamp;
    }

    public RiderStats setLastUpdatedTimestamp(Long lastUpdatedTimestamp) {
        this.lastUpdatedTimestamp = lastUpdatedTimestamp;
        return this;
    }

    public UInteger getCreatedBy() {
        return this.createdBy;
    }

    public RiderStats setCreatedBy(UInteger createdBy) {
        this.createdBy = createdBy;
        return this;
    }

    public UInteger getLastUpdatedBy() {
        return this.lastUpdatedBy;
    }

    public RiderStats setLastUpdatedBy(UInteger lastUpdatedBy) {
        this.lastUpdatedBy = lastUpdatedBy;
        return this;
    }

    public Long getValidFromDate() {
        return this.validFromDate;
    }

    public RiderStats setValidFromDate(Long validFromDate) {
        this.validFromDate = validFromDate;
        return this;
    }

    public Long getValidToDate() {
        return this.validToDate;
    }

    public RiderStats setValidToDate(Long validToDate) {
        this.validToDate = validToDate;
        return this;
    }

    public String getFirstTripPickup() {
        return this.firstTripPickup;
    }

    public RiderStats setFirstTripPickup(String firstTripPickup) {
        this.firstTripPickup = firstTripPickup;
        return this;
    }

    public String getFirstTripDrop() {
        return this.firstTripDrop;
    }

    public RiderStats setFirstTripDrop(String firstTripDrop) {
        this.firstTripDrop = firstTripDrop;
        return this;
    }

    public String getTopDriverOne() {
        return this.topDriverOne;
    }

    public RiderStats setTopDriverOne(String topDriverOne) {
        this.topDriverOne = topDriverOne;
        return this;
    }

    public BigDecimal getTopDriverOneRating() {
        return this.topDriverOneRating;
    }

    public RiderStats setTopDriverOneRating(BigDecimal topDriverOneRating) {
        this.topDriverOneRating = topDriverOneRating;
        return this;
    }

    public String getTopDriverTwo() {
        return this.topDriverTwo;
    }

    public RiderStats setTopDriverTwo(String topDriverTwo) {
        this.topDriverTwo = topDriverTwo;
        return this;
    }

    public BigDecimal getTopDriverTwoRating() {
        return this.topDriverTwoRating;
    }

    public RiderStats setTopDriverTwoRating(BigDecimal topDriverTwoRating) {
        this.topDriverTwoRating = topDriverTwoRating;
        return this;
    }

    public String getTopDriverThree() {
        return this.topDriverThree;
    }

    public RiderStats setTopDriverThree(String topDriverThree) {
        this.topDriverThree = topDriverThree;
        return this;
    }

    public BigDecimal getTopDriverThreeRating() {
        return this.topDriverThreeRating;
    }

    public RiderStats setTopDriverThreeRating(BigDecimal topDriverThreeRating) {
        this.topDriverThreeRating = topDriverThreeRating;
        return this;
    }

    public Byte getIsActive() {
        return this.isActive;
    }

    public RiderStats setIsActive(Byte isActive) {
        this.isActive = isActive;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final RiderStats other = (RiderStats) obj;
        if (id == null) {
            if (other.id != null)
                return false;
        }
        else if (!id.equals(other.id))
            return false;
        if (riderId == null) {
            if (other.riderId != null)
                return false;
        }
        else if (!riderId.equals(other.riderId))
            return false;
        if (totalTrips == null) {
            if (other.totalTrips != null)
                return false;
        }
        else if (!totalTrips.equals(other.totalTrips))
            return false;
        if (totalCarbonSaved == null) {
            if (other.totalCarbonSaved != null)
                return false;
        }
        else if (!totalCarbonSaved.equals(other.totalCarbonSaved))
            return false;
        if (totalKms == null) {
            if (other.totalKms != null)
                return false;
        }
        else if (!totalKms.equals(other.totalKms))
            return false;
        if (totalHours == null) {
            if (other.totalHours != null)
                return false;
        }
        else if (!totalHours.equals(other.totalHours))
            return false;
        if (topDestinationOne == null) {
            if (other.topDestinationOne != null)
                return false;
        }
        else if (!topDestinationOne.equals(other.topDestinationOne))
            return false;
        if (topDestinationTwo == null) {
            if (other.topDestinationTwo != null)
                return false;
        }
        else if (!topDestinationTwo.equals(other.topDestinationTwo))
            return false;
        if (topDestinationThree == null) {
            if (other.topDestinationThree != null)
                return false;
        }
        else if (!topDestinationThree.equals(other.topDestinationThree))
            return false;
        if (longestTripKms == null) {
            if (other.longestTripKms != null)
                return false;
        }
        else if (!longestTripKms.equals(other.longestTripKms))
            return false;
        if (averageRating == null) {
            if (other.averageRating != null)
                return false;
        }
        else if (!averageRating.equals(other.averageRating))
            return false;
        if (longestRidePickup == null) {
            if (other.longestRidePickup != null)
                return false;
        }
        else if (!longestRidePickup.equals(other.longestRidePickup))
            return false;
        if (longestRideDrop == null) {
            if (other.longestRideDrop != null)
                return false;
        }
        else if (!longestRideDrop.equals(other.longestRideDrop))
            return false;
        if (longestRideStops == null) {
            if (other.longestRideStops != null)
                return false;
        }
        else if (!longestRideStops.equals(other.longestRideStops))
            return false;
        if (category == null) {
            if (other.category != null)
                return false;
        }
        else if (!category.equals(other.category))
            return false;
        if (createdTimestamp == null) {
            if (other.createdTimestamp != null)
                return false;
        }
        else if (!createdTimestamp.equals(other.createdTimestamp))
            return false;
        if (lastUpdatedTimestamp == null) {
            if (other.lastUpdatedTimestamp != null)
                return false;
        }
        else if (!lastUpdatedTimestamp.equals(other.lastUpdatedTimestamp))
            return false;
        if (createdBy == null) {
            if (other.createdBy != null)
                return false;
        }
        else if (!createdBy.equals(other.createdBy))
            return false;
        if (lastUpdatedBy == null) {
            if (other.lastUpdatedBy != null)
                return false;
        }
        else if (!lastUpdatedBy.equals(other.lastUpdatedBy))
            return false;
        if (validFromDate == null) {
            if (other.validFromDate != null)
                return false;
        }
        else if (!validFromDate.equals(other.validFromDate))
            return false;
        if (validToDate == null) {
            if (other.validToDate != null)
                return false;
        }
        else if (!validToDate.equals(other.validToDate))
            return false;
        if (firstTripPickup == null) {
            if (other.firstTripPickup != null)
                return false;
        }
        else if (!firstTripPickup.equals(other.firstTripPickup))
            return false;
        if (firstTripDrop == null) {
            if (other.firstTripDrop != null)
                return false;
        }
        else if (!firstTripDrop.equals(other.firstTripDrop))
            return false;
        if (topDriverOne == null) {
            if (other.topDriverOne != null)
                return false;
        }
        else if (!topDriverOne.equals(other.topDriverOne))
            return false;
        if (topDriverOneRating == null) {
            if (other.topDriverOneRating != null)
                return false;
        }
        else if (!topDriverOneRating.equals(other.topDriverOneRating))
            return false;
        if (topDriverTwo == null) {
            if (other.topDriverTwo != null)
                return false;
        }
        else if (!topDriverTwo.equals(other.topDriverTwo))
            return false;
        if (topDriverTwoRating == null) {
            if (other.topDriverTwoRating != null)
                return false;
        }
        else if (!topDriverTwoRating.equals(other.topDriverTwoRating))
            return false;
        if (topDriverThree == null) {
            if (other.topDriverThree != null)
                return false;
        }
        else if (!topDriverThree.equals(other.topDriverThree))
            return false;
        if (topDriverThreeRating == null) {
            if (other.topDriverThreeRating != null)
                return false;
        }
        else if (!topDriverThreeRating.equals(other.topDriverThreeRating))
            return false;
        if (isActive == null) {
            if (other.isActive != null)
                return false;
        }
        else if (!isActive.equals(other.isActive))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.riderId == null) ? 0 : this.riderId.hashCode());
        result = prime * result + ((this.totalTrips == null) ? 0 : this.totalTrips.hashCode());
        result = prime * result + ((this.totalCarbonSaved == null) ? 0 : this.totalCarbonSaved.hashCode());
        result = prime * result + ((this.totalKms == null) ? 0 : this.totalKms.hashCode());
        result = prime * result + ((this.totalHours == null) ? 0 : this.totalHours.hashCode());
        result = prime * result + ((this.topDestinationOne == null) ? 0 : this.topDestinationOne.hashCode());
        result = prime * result + ((this.topDestinationTwo == null) ? 0 : this.topDestinationTwo.hashCode());
        result = prime * result + ((this.topDestinationThree == null) ? 0 : this.topDestinationThree.hashCode());
        result = prime * result + ((this.longestTripKms == null) ? 0 : this.longestTripKms.hashCode());
        result = prime * result + ((this.averageRating == null) ? 0 : this.averageRating.hashCode());
        result = prime * result + ((this.longestRidePickup == null) ? 0 : this.longestRidePickup.hashCode());
        result = prime * result + ((this.longestRideDrop == null) ? 0 : this.longestRideDrop.hashCode());
        result = prime * result + ((this.longestRideStops == null) ? 0 : this.longestRideStops.hashCode());
        result = prime * result + ((this.category == null) ? 0 : this.category.hashCode());
        result = prime * result + ((this.createdTimestamp == null) ? 0 : this.createdTimestamp.hashCode());
        result = prime * result + ((this.lastUpdatedTimestamp == null) ? 0 : this.lastUpdatedTimestamp.hashCode());
        result = prime * result + ((this.createdBy == null) ? 0 : this.createdBy.hashCode());
        result = prime * result + ((this.lastUpdatedBy == null) ? 0 : this.lastUpdatedBy.hashCode());
        result = prime * result + ((this.validFromDate == null) ? 0 : this.validFromDate.hashCode());
        result = prime * result + ((this.validToDate == null) ? 0 : this.validToDate.hashCode());
        result = prime * result + ((this.firstTripPickup == null) ? 0 : this.firstTripPickup.hashCode());
        result = prime * result + ((this.firstTripDrop == null) ? 0 : this.firstTripDrop.hashCode());
        result = prime * result + ((this.topDriverOne == null) ? 0 : this.topDriverOne.hashCode());
        result = prime * result + ((this.topDriverOneRating == null) ? 0 : this.topDriverOneRating.hashCode());
        result = prime * result + ((this.topDriverTwo == null) ? 0 : this.topDriverTwo.hashCode());
        result = prime * result + ((this.topDriverTwoRating == null) ? 0 : this.topDriverTwoRating.hashCode());
        result = prime * result + ((this.topDriverThree == null) ? 0 : this.topDriverThree.hashCode());
        result = prime * result + ((this.topDriverThreeRating == null) ? 0 : this.topDriverThreeRating.hashCode());
        result = prime * result + ((this.isActive == null) ? 0 : this.isActive.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("RiderStats (");

        sb.append(id);
        sb.append(", ").append(riderId);
        sb.append(", ").append(totalTrips);
        sb.append(", ").append(totalCarbonSaved);
        sb.append(", ").append(totalKms);
        sb.append(", ").append(totalHours);
        sb.append(", ").append(topDestinationOne);
        sb.append(", ").append(topDestinationTwo);
        sb.append(", ").append(topDestinationThree);
        sb.append(", ").append(longestTripKms);
        sb.append(", ").append(averageRating);
        sb.append(", ").append(longestRidePickup);
        sb.append(", ").append(longestRideDrop);
        sb.append(", ").append(longestRideStops);
        sb.append(", ").append(category);
        sb.append(", ").append(createdTimestamp);
        sb.append(", ").append(lastUpdatedTimestamp);
        sb.append(", ").append(createdBy);
        sb.append(", ").append(lastUpdatedBy);
        sb.append(", ").append(validFromDate);
        sb.append(", ").append(validToDate);
        sb.append(", ").append(firstTripPickup);
        sb.append(", ").append(firstTripDrop);
        sb.append(", ").append(topDriverOne);
        sb.append(", ").append(topDriverOneRating);
        sb.append(", ").append(topDriverTwo);
        sb.append(", ").append(topDriverTwoRating);
        sb.append(", ").append(topDriverThree);
        sb.append(", ").append(topDriverThreeRating);
        sb.append(", ").append(isActive);

        sb.append(")");
        return sb.toString();
    }
}
