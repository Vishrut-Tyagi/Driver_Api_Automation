/*
 * This file is generated by jOOQ.
 */
package com.blusmart_dev.database.tables.pojos;


import java.io.Serializable;

import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ScheduledEvents implements Serializable {

    private static final long serialVersionUID = -244573095;

    private UInteger id;
    private String   eventType;
    private String   requestData;
    private String   state;
    private Byte     isActive;
    private Long     scheduledTimestamp;
    private Long     createdTimestamp;
    private Long     lastUpdatedTimestamp;
    private UInteger createdBy;
    private UInteger lastUpdatedBy;
    private String   responseData;
    private String   triggerValidity;
    private String   eventValidity;

    public ScheduledEvents() {}

    public ScheduledEvents(ScheduledEvents value) {
        this.id = value.id;
        this.eventType = value.eventType;
        this.requestData = value.requestData;
        this.state = value.state;
        this.isActive = value.isActive;
        this.scheduledTimestamp = value.scheduledTimestamp;
        this.createdTimestamp = value.createdTimestamp;
        this.lastUpdatedTimestamp = value.lastUpdatedTimestamp;
        this.createdBy = value.createdBy;
        this.lastUpdatedBy = value.lastUpdatedBy;
        this.responseData = value.responseData;
        this.triggerValidity = value.triggerValidity;
        this.eventValidity = value.eventValidity;
    }

    public ScheduledEvents(
        UInteger id,
        String   eventType,
        String   requestData,
        String   state,
        Byte     isActive,
        Long     scheduledTimestamp,
        Long     createdTimestamp,
        Long     lastUpdatedTimestamp,
        UInteger createdBy,
        UInteger lastUpdatedBy,
        String   responseData,
        String   triggerValidity,
        String   eventValidity
    ) {
        this.id = id;
        this.eventType = eventType;
        this.requestData = requestData;
        this.state = state;
        this.isActive = isActive;
        this.scheduledTimestamp = scheduledTimestamp;
        this.createdTimestamp = createdTimestamp;
        this.lastUpdatedTimestamp = lastUpdatedTimestamp;
        this.createdBy = createdBy;
        this.lastUpdatedBy = lastUpdatedBy;
        this.responseData = responseData;
        this.triggerValidity = triggerValidity;
        this.eventValidity = eventValidity;
    }

    public UInteger getId() {
        return this.id;
    }

    public ScheduledEvents setId(UInteger id) {
        this.id = id;
        return this;
    }

    public String getEventType() {
        return this.eventType;
    }

    public ScheduledEvents setEventType(String eventType) {
        this.eventType = eventType;
        return this;
    }

    public String getRequestData() {
        return this.requestData;
    }

    public ScheduledEvents setRequestData(String requestData) {
        this.requestData = requestData;
        return this;
    }

    public String getState() {
        return this.state;
    }

    public ScheduledEvents setState(String state) {
        this.state = state;
        return this;
    }

    public Byte getIsActive() {
        return this.isActive;
    }

    public ScheduledEvents setIsActive(Byte isActive) {
        this.isActive = isActive;
        return this;
    }

    public Long getScheduledTimestamp() {
        return this.scheduledTimestamp;
    }

    public ScheduledEvents setScheduledTimestamp(Long scheduledTimestamp) {
        this.scheduledTimestamp = scheduledTimestamp;
        return this;
    }

    public Long getCreatedTimestamp() {
        return this.createdTimestamp;
    }

    public ScheduledEvents setCreatedTimestamp(Long createdTimestamp) {
        this.createdTimestamp = createdTimestamp;
        return this;
    }

    public Long getLastUpdatedTimestamp() {
        return this.lastUpdatedTimestamp;
    }

    public ScheduledEvents setLastUpdatedTimestamp(Long lastUpdatedTimestamp) {
        this.lastUpdatedTimestamp = lastUpdatedTimestamp;
        return this;
    }

    public UInteger getCreatedBy() {
        return this.createdBy;
    }

    public ScheduledEvents setCreatedBy(UInteger createdBy) {
        this.createdBy = createdBy;
        return this;
    }

    public UInteger getLastUpdatedBy() {
        return this.lastUpdatedBy;
    }

    public ScheduledEvents setLastUpdatedBy(UInteger lastUpdatedBy) {
        this.lastUpdatedBy = lastUpdatedBy;
        return this;
    }

    public String getResponseData() {
        return this.responseData;
    }

    public ScheduledEvents setResponseData(String responseData) {
        this.responseData = responseData;
        return this;
    }

    public String getTriggerValidity() {
        return this.triggerValidity;
    }

    public ScheduledEvents setTriggerValidity(String triggerValidity) {
        this.triggerValidity = triggerValidity;
        return this;
    }

    public String getEventValidity() {
        return this.eventValidity;
    }

    public ScheduledEvents setEventValidity(String eventValidity) {
        this.eventValidity = eventValidity;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final ScheduledEvents other = (ScheduledEvents) obj;
        if (id == null) {
            if (other.id != null)
                return false;
        }
        else if (!id.equals(other.id))
            return false;
        if (eventType == null) {
            if (other.eventType != null)
                return false;
        }
        else if (!eventType.equals(other.eventType))
            return false;
        if (requestData == null) {
            if (other.requestData != null)
                return false;
        }
        else if (!requestData.equals(other.requestData))
            return false;
        if (state == null) {
            if (other.state != null)
                return false;
        }
        else if (!state.equals(other.state))
            return false;
        if (isActive == null) {
            if (other.isActive != null)
                return false;
        }
        else if (!isActive.equals(other.isActive))
            return false;
        if (scheduledTimestamp == null) {
            if (other.scheduledTimestamp != null)
                return false;
        }
        else if (!scheduledTimestamp.equals(other.scheduledTimestamp))
            return false;
        if (createdTimestamp == null) {
            if (other.createdTimestamp != null)
                return false;
        }
        else if (!createdTimestamp.equals(other.createdTimestamp))
            return false;
        if (lastUpdatedTimestamp == null) {
            if (other.lastUpdatedTimestamp != null)
                return false;
        }
        else if (!lastUpdatedTimestamp.equals(other.lastUpdatedTimestamp))
            return false;
        if (createdBy == null) {
            if (other.createdBy != null)
                return false;
        }
        else if (!createdBy.equals(other.createdBy))
            return false;
        if (lastUpdatedBy == null) {
            if (other.lastUpdatedBy != null)
                return false;
        }
        else if (!lastUpdatedBy.equals(other.lastUpdatedBy))
            return false;
        if (responseData == null) {
            if (other.responseData != null)
                return false;
        }
        else if (!responseData.equals(other.responseData))
            return false;
        if (triggerValidity == null) {
            if (other.triggerValidity != null)
                return false;
        }
        else if (!triggerValidity.equals(other.triggerValidity))
            return false;
        if (eventValidity == null) {
            if (other.eventValidity != null)
                return false;
        }
        else if (!eventValidity.equals(other.eventValidity))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.eventType == null) ? 0 : this.eventType.hashCode());
        result = prime * result + ((this.requestData == null) ? 0 : this.requestData.hashCode());
        result = prime * result + ((this.state == null) ? 0 : this.state.hashCode());
        result = prime * result + ((this.isActive == null) ? 0 : this.isActive.hashCode());
        result = prime * result + ((this.scheduledTimestamp == null) ? 0 : this.scheduledTimestamp.hashCode());
        result = prime * result + ((this.createdTimestamp == null) ? 0 : this.createdTimestamp.hashCode());
        result = prime * result + ((this.lastUpdatedTimestamp == null) ? 0 : this.lastUpdatedTimestamp.hashCode());
        result = prime * result + ((this.createdBy == null) ? 0 : this.createdBy.hashCode());
        result = prime * result + ((this.lastUpdatedBy == null) ? 0 : this.lastUpdatedBy.hashCode());
        result = prime * result + ((this.responseData == null) ? 0 : this.responseData.hashCode());
        result = prime * result + ((this.triggerValidity == null) ? 0 : this.triggerValidity.hashCode());
        result = prime * result + ((this.eventValidity == null) ? 0 : this.eventValidity.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("ScheduledEvents (");

        sb.append(id);
        sb.append(", ").append(eventType);
        sb.append(", ").append(requestData);
        sb.append(", ").append(state);
        sb.append(", ").append(isActive);
        sb.append(", ").append(scheduledTimestamp);
        sb.append(", ").append(createdTimestamp);
        sb.append(", ").append(lastUpdatedTimestamp);
        sb.append(", ").append(createdBy);
        sb.append(", ").append(lastUpdatedBy);
        sb.append(", ").append(responseData);
        sb.append(", ").append(triggerValidity);
        sb.append(", ").append(eventValidity);

        sb.append(")");
        return sb.toString();
    }
}
