/*
 * This file is generated by jOOQ.
 */
package com.blusmart_dev.database.tables.pojos;


import java.io.Serializable;

import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SharedRides implements Serializable {

    private static final long serialVersionUID = 1974069167;

    private Integer  id;
    private UInteger riderId;
    private UInteger rideRequestId;
    private String   token;
    private String   phone;
    private Long     estimatedStartTimestamp;
    private Byte     isActive;
    private Long     createdTimestamp;
    private Long     lastUpdatedTimestamp;
    private UInteger createdBy;
    private UInteger lastUpdatedBy;
    private Long     tokenExpirationTimestamp;
    private String   urlToken;

    public SharedRides() {}

    public SharedRides(SharedRides value) {
        this.id = value.id;
        this.riderId = value.riderId;
        this.rideRequestId = value.rideRequestId;
        this.token = value.token;
        this.phone = value.phone;
        this.estimatedStartTimestamp = value.estimatedStartTimestamp;
        this.isActive = value.isActive;
        this.createdTimestamp = value.createdTimestamp;
        this.lastUpdatedTimestamp = value.lastUpdatedTimestamp;
        this.createdBy = value.createdBy;
        this.lastUpdatedBy = value.lastUpdatedBy;
        this.tokenExpirationTimestamp = value.tokenExpirationTimestamp;
        this.urlToken = value.urlToken;
    }

    public SharedRides(
        Integer  id,
        UInteger riderId,
        UInteger rideRequestId,
        String   token,
        String   phone,
        Long     estimatedStartTimestamp,
        Byte     isActive,
        Long     createdTimestamp,
        Long     lastUpdatedTimestamp,
        UInteger createdBy,
        UInteger lastUpdatedBy,
        Long     tokenExpirationTimestamp,
        String   urlToken
    ) {
        this.id = id;
        this.riderId = riderId;
        this.rideRequestId = rideRequestId;
        this.token = token;
        this.phone = phone;
        this.estimatedStartTimestamp = estimatedStartTimestamp;
        this.isActive = isActive;
        this.createdTimestamp = createdTimestamp;
        this.lastUpdatedTimestamp = lastUpdatedTimestamp;
        this.createdBy = createdBy;
        this.lastUpdatedBy = lastUpdatedBy;
        this.tokenExpirationTimestamp = tokenExpirationTimestamp;
        this.urlToken = urlToken;
    }

    public Integer getId() {
        return this.id;
    }

    public SharedRides setId(Integer id) {
        this.id = id;
        return this;
    }

    public UInteger getRiderId() {
        return this.riderId;
    }

    public SharedRides setRiderId(UInteger riderId) {
        this.riderId = riderId;
        return this;
    }

    public UInteger getRideRequestId() {
        return this.rideRequestId;
    }

    public SharedRides setRideRequestId(UInteger rideRequestId) {
        this.rideRequestId = rideRequestId;
        return this;
    }

    public String getToken() {
        return this.token;
    }

    public SharedRides setToken(String token) {
        this.token = token;
        return this;
    }

    public String getPhone() {
        return this.phone;
    }

    public SharedRides setPhone(String phone) {
        this.phone = phone;
        return this;
    }

    public Long getEstimatedStartTimestamp() {
        return this.estimatedStartTimestamp;
    }

    public SharedRides setEstimatedStartTimestamp(Long estimatedStartTimestamp) {
        this.estimatedStartTimestamp = estimatedStartTimestamp;
        return this;
    }

    public Byte getIsActive() {
        return this.isActive;
    }

    public SharedRides setIsActive(Byte isActive) {
        this.isActive = isActive;
        return this;
    }

    public Long getCreatedTimestamp() {
        return this.createdTimestamp;
    }

    public SharedRides setCreatedTimestamp(Long createdTimestamp) {
        this.createdTimestamp = createdTimestamp;
        return this;
    }

    public Long getLastUpdatedTimestamp() {
        return this.lastUpdatedTimestamp;
    }

    public SharedRides setLastUpdatedTimestamp(Long lastUpdatedTimestamp) {
        this.lastUpdatedTimestamp = lastUpdatedTimestamp;
        return this;
    }

    public UInteger getCreatedBy() {
        return this.createdBy;
    }

    public SharedRides setCreatedBy(UInteger createdBy) {
        this.createdBy = createdBy;
        return this;
    }

    public UInteger getLastUpdatedBy() {
        return this.lastUpdatedBy;
    }

    public SharedRides setLastUpdatedBy(UInteger lastUpdatedBy) {
        this.lastUpdatedBy = lastUpdatedBy;
        return this;
    }

    public Long getTokenExpirationTimestamp() {
        return this.tokenExpirationTimestamp;
    }

    public SharedRides setTokenExpirationTimestamp(Long tokenExpirationTimestamp) {
        this.tokenExpirationTimestamp = tokenExpirationTimestamp;
        return this;
    }

    public String getUrlToken() {
        return this.urlToken;
    }

    public SharedRides setUrlToken(String urlToken) {
        this.urlToken = urlToken;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final SharedRides other = (SharedRides) obj;
        if (id == null) {
            if (other.id != null)
                return false;
        }
        else if (!id.equals(other.id))
            return false;
        if (riderId == null) {
            if (other.riderId != null)
                return false;
        }
        else if (!riderId.equals(other.riderId))
            return false;
        if (rideRequestId == null) {
            if (other.rideRequestId != null)
                return false;
        }
        else if (!rideRequestId.equals(other.rideRequestId))
            return false;
        if (token == null) {
            if (other.token != null)
                return false;
        }
        else if (!token.equals(other.token))
            return false;
        if (phone == null) {
            if (other.phone != null)
                return false;
        }
        else if (!phone.equals(other.phone))
            return false;
        if (estimatedStartTimestamp == null) {
            if (other.estimatedStartTimestamp != null)
                return false;
        }
        else if (!estimatedStartTimestamp.equals(other.estimatedStartTimestamp))
            return false;
        if (isActive == null) {
            if (other.isActive != null)
                return false;
        }
        else if (!isActive.equals(other.isActive))
            return false;
        if (createdTimestamp == null) {
            if (other.createdTimestamp != null)
                return false;
        }
        else if (!createdTimestamp.equals(other.createdTimestamp))
            return false;
        if (lastUpdatedTimestamp == null) {
            if (other.lastUpdatedTimestamp != null)
                return false;
        }
        else if (!lastUpdatedTimestamp.equals(other.lastUpdatedTimestamp))
            return false;
        if (createdBy == null) {
            if (other.createdBy != null)
                return false;
        }
        else if (!createdBy.equals(other.createdBy))
            return false;
        if (lastUpdatedBy == null) {
            if (other.lastUpdatedBy != null)
                return false;
        }
        else if (!lastUpdatedBy.equals(other.lastUpdatedBy))
            return false;
        if (tokenExpirationTimestamp == null) {
            if (other.tokenExpirationTimestamp != null)
                return false;
        }
        else if (!tokenExpirationTimestamp.equals(other.tokenExpirationTimestamp))
            return false;
        if (urlToken == null) {
            if (other.urlToken != null)
                return false;
        }
        else if (!urlToken.equals(other.urlToken))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.riderId == null) ? 0 : this.riderId.hashCode());
        result = prime * result + ((this.rideRequestId == null) ? 0 : this.rideRequestId.hashCode());
        result = prime * result + ((this.token == null) ? 0 : this.token.hashCode());
        result = prime * result + ((this.phone == null) ? 0 : this.phone.hashCode());
        result = prime * result + ((this.estimatedStartTimestamp == null) ? 0 : this.estimatedStartTimestamp.hashCode());
        result = prime * result + ((this.isActive == null) ? 0 : this.isActive.hashCode());
        result = prime * result + ((this.createdTimestamp == null) ? 0 : this.createdTimestamp.hashCode());
        result = prime * result + ((this.lastUpdatedTimestamp == null) ? 0 : this.lastUpdatedTimestamp.hashCode());
        result = prime * result + ((this.createdBy == null) ? 0 : this.createdBy.hashCode());
        result = prime * result + ((this.lastUpdatedBy == null) ? 0 : this.lastUpdatedBy.hashCode());
        result = prime * result + ((this.tokenExpirationTimestamp == null) ? 0 : this.tokenExpirationTimestamp.hashCode());
        result = prime * result + ((this.urlToken == null) ? 0 : this.urlToken.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("SharedRides (");

        sb.append(id);
        sb.append(", ").append(riderId);
        sb.append(", ").append(rideRequestId);
        sb.append(", ").append(token);
        sb.append(", ").append(phone);
        sb.append(", ").append(estimatedStartTimestamp);
        sb.append(", ").append(isActive);
        sb.append(", ").append(createdTimestamp);
        sb.append(", ").append(lastUpdatedTimestamp);
        sb.append(", ").append(createdBy);
        sb.append(", ").append(lastUpdatedBy);
        sb.append(", ").append(tokenExpirationTimestamp);
        sb.append(", ").append(urlToken);

        sb.append(")");
        return sb.toString();
    }
}
