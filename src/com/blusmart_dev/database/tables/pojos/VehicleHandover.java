/*
 * This file is generated by jOOQ.
 */
package com.blusmart_dev.database.tables.pojos;


import java.io.Serializable;
import java.math.BigDecimal;

import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class VehicleHandover implements Serializable {

    private static final long serialVersionUID = 1768725052;

    private UInteger   id;
    private UInteger   fromId;
    private UInteger   toId;
    private String     vehicleNumber;
    private String     handoverType;
    private String     handoverStatus;
    private BigDecimal socReading;
    private BigDecimal odometerReading;
    private Byte       isActive;
    private Long       createdTimestamp;
    private Long       lastUpdatedTimestamp;
    private UInteger   createdBy;
    private UInteger   lastUpdatedBy;
    private String     comments;
    private UInteger   hubId;
    private String     otherFlags;
    private String     handoverNotes;

    public VehicleHandover() {}

    public VehicleHandover(VehicleHandover value) {
        this.id = value.id;
        this.fromId = value.fromId;
        this.toId = value.toId;
        this.vehicleNumber = value.vehicleNumber;
        this.handoverType = value.handoverType;
        this.handoverStatus = value.handoverStatus;
        this.socReading = value.socReading;
        this.odometerReading = value.odometerReading;
        this.isActive = value.isActive;
        this.createdTimestamp = value.createdTimestamp;
        this.lastUpdatedTimestamp = value.lastUpdatedTimestamp;
        this.createdBy = value.createdBy;
        this.lastUpdatedBy = value.lastUpdatedBy;
        this.comments = value.comments;
        this.hubId = value.hubId;
        this.otherFlags = value.otherFlags;
        this.handoverNotes = value.handoverNotes;
    }

    public VehicleHandover(
        UInteger   id,
        UInteger   fromId,
        UInteger   toId,
        String     vehicleNumber,
        String     handoverType,
        String     handoverStatus,
        BigDecimal socReading,
        BigDecimal odometerReading,
        Byte       isActive,
        Long       createdTimestamp,
        Long       lastUpdatedTimestamp,
        UInteger   createdBy,
        UInteger   lastUpdatedBy,
        String     comments,
        UInteger   hubId,
        String     otherFlags,
        String     handoverNotes
    ) {
        this.id = id;
        this.fromId = fromId;
        this.toId = toId;
        this.vehicleNumber = vehicleNumber;
        this.handoverType = handoverType;
        this.handoverStatus = handoverStatus;
        this.socReading = socReading;
        this.odometerReading = odometerReading;
        this.isActive = isActive;
        this.createdTimestamp = createdTimestamp;
        this.lastUpdatedTimestamp = lastUpdatedTimestamp;
        this.createdBy = createdBy;
        this.lastUpdatedBy = lastUpdatedBy;
        this.comments = comments;
        this.hubId = hubId;
        this.otherFlags = otherFlags;
        this.handoverNotes = handoverNotes;
    }

    public UInteger getId() {
        return this.id;
    }

    public VehicleHandover setId(UInteger id) {
        this.id = id;
        return this;
    }

    public UInteger getFromId() {
        return this.fromId;
    }

    public VehicleHandover setFromId(UInteger fromId) {
        this.fromId = fromId;
        return this;
    }

    public UInteger getToId() {
        return this.toId;
    }

    public VehicleHandover setToId(UInteger toId) {
        this.toId = toId;
        return this;
    }

    public String getVehicleNumber() {
        return this.vehicleNumber;
    }

    public VehicleHandover setVehicleNumber(String vehicleNumber) {
        this.vehicleNumber = vehicleNumber;
        return this;
    }

    public String getHandoverType() {
        return this.handoverType;
    }

    public VehicleHandover setHandoverType(String handoverType) {
        this.handoverType = handoverType;
        return this;
    }

    public String getHandoverStatus() {
        return this.handoverStatus;
    }

    public VehicleHandover setHandoverStatus(String handoverStatus) {
        this.handoverStatus = handoverStatus;
        return this;
    }

    public BigDecimal getSocReading() {
        return this.socReading;
    }

    public VehicleHandover setSocReading(BigDecimal socReading) {
        this.socReading = socReading;
        return this;
    }

    public BigDecimal getOdometerReading() {
        return this.odometerReading;
    }

    public VehicleHandover setOdometerReading(BigDecimal odometerReading) {
        this.odometerReading = odometerReading;
        return this;
    }

    public Byte getIsActive() {
        return this.isActive;
    }

    public VehicleHandover setIsActive(Byte isActive) {
        this.isActive = isActive;
        return this;
    }

    public Long getCreatedTimestamp() {
        return this.createdTimestamp;
    }

    public VehicleHandover setCreatedTimestamp(Long createdTimestamp) {
        this.createdTimestamp = createdTimestamp;
        return this;
    }

    public Long getLastUpdatedTimestamp() {
        return this.lastUpdatedTimestamp;
    }

    public VehicleHandover setLastUpdatedTimestamp(Long lastUpdatedTimestamp) {
        this.lastUpdatedTimestamp = lastUpdatedTimestamp;
        return this;
    }

    public UInteger getCreatedBy() {
        return this.createdBy;
    }

    public VehicleHandover setCreatedBy(UInteger createdBy) {
        this.createdBy = createdBy;
        return this;
    }

    public UInteger getLastUpdatedBy() {
        return this.lastUpdatedBy;
    }

    public VehicleHandover setLastUpdatedBy(UInteger lastUpdatedBy) {
        this.lastUpdatedBy = lastUpdatedBy;
        return this;
    }

    public String getComments() {
        return this.comments;
    }

    public VehicleHandover setComments(String comments) {
        this.comments = comments;
        return this;
    }

    public UInteger getHubId() {
        return this.hubId;
    }

    public VehicleHandover setHubId(UInteger hubId) {
        this.hubId = hubId;
        return this;
    }

    public String getOtherFlags() {
        return this.otherFlags;
    }

    public VehicleHandover setOtherFlags(String otherFlags) {
        this.otherFlags = otherFlags;
        return this;
    }

    public String getHandoverNotes() {
        return this.handoverNotes;
    }

    public VehicleHandover setHandoverNotes(String handoverNotes) {
        this.handoverNotes = handoverNotes;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final VehicleHandover other = (VehicleHandover) obj;
        if (id == null) {
            if (other.id != null)
                return false;
        }
        else if (!id.equals(other.id))
            return false;
        if (fromId == null) {
            if (other.fromId != null)
                return false;
        }
        else if (!fromId.equals(other.fromId))
            return false;
        if (toId == null) {
            if (other.toId != null)
                return false;
        }
        else if (!toId.equals(other.toId))
            return false;
        if (vehicleNumber == null) {
            if (other.vehicleNumber != null)
                return false;
        }
        else if (!vehicleNumber.equals(other.vehicleNumber))
            return false;
        if (handoverType == null) {
            if (other.handoverType != null)
                return false;
        }
        else if (!handoverType.equals(other.handoverType))
            return false;
        if (handoverStatus == null) {
            if (other.handoverStatus != null)
                return false;
        }
        else if (!handoverStatus.equals(other.handoverStatus))
            return false;
        if (socReading == null) {
            if (other.socReading != null)
                return false;
        }
        else if (!socReading.equals(other.socReading))
            return false;
        if (odometerReading == null) {
            if (other.odometerReading != null)
                return false;
        }
        else if (!odometerReading.equals(other.odometerReading))
            return false;
        if (isActive == null) {
            if (other.isActive != null)
                return false;
        }
        else if (!isActive.equals(other.isActive))
            return false;
        if (createdTimestamp == null) {
            if (other.createdTimestamp != null)
                return false;
        }
        else if (!createdTimestamp.equals(other.createdTimestamp))
            return false;
        if (lastUpdatedTimestamp == null) {
            if (other.lastUpdatedTimestamp != null)
                return false;
        }
        else if (!lastUpdatedTimestamp.equals(other.lastUpdatedTimestamp))
            return false;
        if (createdBy == null) {
            if (other.createdBy != null)
                return false;
        }
        else if (!createdBy.equals(other.createdBy))
            return false;
        if (lastUpdatedBy == null) {
            if (other.lastUpdatedBy != null)
                return false;
        }
        else if (!lastUpdatedBy.equals(other.lastUpdatedBy))
            return false;
        if (comments == null) {
            if (other.comments != null)
                return false;
        }
        else if (!comments.equals(other.comments))
            return false;
        if (hubId == null) {
            if (other.hubId != null)
                return false;
        }
        else if (!hubId.equals(other.hubId))
            return false;
        if (otherFlags == null) {
            if (other.otherFlags != null)
                return false;
        }
        else if (!otherFlags.equals(other.otherFlags))
            return false;
        if (handoverNotes == null) {
            if (other.handoverNotes != null)
                return false;
        }
        else if (!handoverNotes.equals(other.handoverNotes))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.fromId == null) ? 0 : this.fromId.hashCode());
        result = prime * result + ((this.toId == null) ? 0 : this.toId.hashCode());
        result = prime * result + ((this.vehicleNumber == null) ? 0 : this.vehicleNumber.hashCode());
        result = prime * result + ((this.handoverType == null) ? 0 : this.handoverType.hashCode());
        result = prime * result + ((this.handoverStatus == null) ? 0 : this.handoverStatus.hashCode());
        result = prime * result + ((this.socReading == null) ? 0 : this.socReading.hashCode());
        result = prime * result + ((this.odometerReading == null) ? 0 : this.odometerReading.hashCode());
        result = prime * result + ((this.isActive == null) ? 0 : this.isActive.hashCode());
        result = prime * result + ((this.createdTimestamp == null) ? 0 : this.createdTimestamp.hashCode());
        result = prime * result + ((this.lastUpdatedTimestamp == null) ? 0 : this.lastUpdatedTimestamp.hashCode());
        result = prime * result + ((this.createdBy == null) ? 0 : this.createdBy.hashCode());
        result = prime * result + ((this.lastUpdatedBy == null) ? 0 : this.lastUpdatedBy.hashCode());
        result = prime * result + ((this.comments == null) ? 0 : this.comments.hashCode());
        result = prime * result + ((this.hubId == null) ? 0 : this.hubId.hashCode());
        result = prime * result + ((this.otherFlags == null) ? 0 : this.otherFlags.hashCode());
        result = prime * result + ((this.handoverNotes == null) ? 0 : this.handoverNotes.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("VehicleHandover (");

        sb.append(id);
        sb.append(", ").append(fromId);
        sb.append(", ").append(toId);
        sb.append(", ").append(vehicleNumber);
        sb.append(", ").append(handoverType);
        sb.append(", ").append(handoverStatus);
        sb.append(", ").append(socReading);
        sb.append(", ").append(odometerReading);
        sb.append(", ").append(isActive);
        sb.append(", ").append(createdTimestamp);
        sb.append(", ").append(lastUpdatedTimestamp);
        sb.append(", ").append(createdBy);
        sb.append(", ").append(lastUpdatedBy);
        sb.append(", ").append(comments);
        sb.append(", ").append(hubId);
        sb.append(", ").append(otherFlags);
        sb.append(", ").append(handoverNotes);

        sb.append(")");
        return sb.toString();
    }
}
